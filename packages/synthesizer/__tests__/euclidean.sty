canvas {
  width = 800
  height = 700
}

Colors {
    -- Keenan palette
    black = rgba(0.0, 0.0, 0.0, 1.0)

    darkpurple = rgba(0.549,0.565,0.757, 1.0)
    purple2 = rgba(0.106, 0.122, 0.54, 0.2)
    lightpurple = rgba(0.816,0.824, 0.902, 1.0)

    verylightpurple = rgba(0.953, 0.957, 0.977, 1.0)
    purple3 = rgba(0.557, 0.627, 0.769, 1.0)

    midnightblue = rgba(0.14, 0.16, 0.52, 1.0)
    lightslategray = rgba(0.50, 0.51, 0.69, 1.0)
    silver = rgba(0.71, 0.72, 0.79, 1.0)
    gainsboro = rgba(0.87, 0.87, 0.87, 1.0)

    darkgray = rgba(0.1, 0.1, 0.1, 1.0)
    mediumgray = rgba(0.5, 0.5, 0.5, 1.0)
    gray = rgba(0.8, 0.8, 0.8, 1.0)
    red = rgba(1.0, 0.0, 0.0, 1.0)
    pink = rgba(1.0, 0.4, 0.7, 1.0)
    yellow = rgba(1.0, 1.0, 0.0, 1.0)
    orange = rgba(1.0, 0.6, 0.0, 1.0)
    lightorange = rgba(1.0, 0.6, 0.0, 0.25)
    green = rgba(0.0, 1.0, 0.0, 1.0)
    blue = rgba(0.0, 0.0, 1.0, 1.0)
    sky = rgba(0.325, 0.718, 0.769, 1.0)
    lightsky = rgba(0.325, 0.718, 0.769, 0.25)
    lightblue = rgba(0.0, 0.0, 1.0, 0.25)
    cyan = rgba(0.0, 1.0, 1.0, 1.0)
    purple = rgba(0.5, 0.0, 0.5, 1.0)
    white = rgba(1.0, 1.0, 1.0, 1.0)
    none = rgba(0.0, 0.0, 0.0, 0.0)
    bluegreen = rgba(0.44, 0.68, 0.60, 1.0)
}

const {
    pi = 3.14159
    arrowheadSize = 0.65
    strokeWidth = 1.75
    textPadding = 7.0
    textPadding2 = 25.0
    repelWeight = 0.7 -- TODO: Reverted from 0.0
    repelWeight2 = 0.5
    fontSize = "18pt"
    containPadding = 50.0
    rayLength = 100.0
    pointSize = 4.0
    pointStroke = 0.0
    thetaRadius = 30.0
    bigThetaRadius = 40.0
}

Plane p {
  dim = 700.0
  p.text = Text {
    center : ((dim / 2.0) - const.textPadding2, (dim / 2.0) - const.textPadding2)
    string : p.label
    fontSize : const.fontSize
  }

  -- inner: #f3f4f9, outer: #8e93c4
  p.icon = Rectangle {
    -- angle : 0.0
    --color : Colors.verylightpurple
    color : Colors.none -- TODO: arrange angle markers so plane can be opaque
    strokeColor : Colors.purple3
    strokeWidth : 2.0
    center : (0.0, 0.0)
    w : dim
    h : dim
  }

  p.text above p.icon
}

Point p {
  p.x = ?
  p.y = ?
  p.vec = (p.x, p.y)
  p.color = Colors.black

    p.icon = Circle {
      center: p.vec
      r : const.pointSize
      color : Colors.black
      strokeWidth : 0.0
      strokeColor : Colors.black
    }

    p.text = Text {
      string : p.label
      rotation : 0.0
      color : Colors.black
      fontSize : const.fontSize
    }
    ensure atDist(p.icon, p.text, const.textPadding)
}

Point p
with Plane P
where In(p, P) {
  -- TODO: the problem is that this ensures the padding is const? Or is > padding okay?
  -- There's a choice of whether to put padding on the point or the text for containment
  ensure contains(P.icon, p.icon, const.containPadding)
  ensure contains(P.icon, p.text, 0.0)

  p.icon above P.icon
  p.text above P.icon
}

Point p, q, r
where Collinear(p, q, r) {
  ensure collinear(p.icon, q.icon, r.icon)
  encourage repel(p.icon, q.icon, const.repelWeight)
  encourage repel(q.icon, r.icon, const.repelWeight)
--  encourage equal(vdist(q.vec, p.vec), vdist(r.vec,q.vec))
}

Segment e
where e := MkSegment(p, q)
with Point p; Point q {
     e.vec = [q.x - p.x, q.y - p.y]

     e.color = Colors.black

     e.icon = Line {
       start : p.icon.center
       end : q.icon.center
	     color : e.color
	     thickness : const.strokeWidth
	     stroke : "none"
	     style : "solid"
     }

     p.icon above e.icon
     q.icon above e.icon

     encourage pointLineDist(p.text.center, e.icon, 30.)
     encourage pointLineDist(q.text.center, e.icon, 30.)

    --  e.icon above const.plane
}

Segment s, t
where EqualLength(s, t) {
  encourage equal(vdist(s.icon.start, s.icon.end), vdist(t.icon.start, t.icon.end))
}

Segment s, t 
where EqualLengthMarker(s, t) {
  s.tick = Line {
    start : midpointOffset(s.icon, 10.)
    end : midpointOffset(s.icon, -10.)
    color : Colors.black
    thickness : 2.0
    stroke : "none"
    style : "solid"
  }
  t.tick = Line {
    start : midpointOffset(t.icon, 10.)
    end : midpointOffset(t.icon, -10.)
    color : Colors.black
    thickness : 2.0
    stroke : "none"
    style : "solid"
  }
  s.tick above s.icon
  t.tick above t.icon
}

Angle a, b
where EqualAngleMarker1(a, b) {
  --find points from p->q, then q->r for each vector. draw vectors for each
  startA = ptOnLine(a.q, a.p, a.radius)
  endA = ptOnLine(a.q, a.r, a.radius)
  sweepA = arcSweepFlag(a.q, startA, endA)

  startB = ptOnLine(b.q, b.p, b.radius)
  endB = ptOnLine(b.q, b.r, b.radius)
  sweepB = arcSweepFlag(b.q, startB, endB)

  override a.mark = Path {
    pathData : arc("open", startA, endA, (a.radius, a.radius), 0, 0, sweepA)
   strokeWidth : 2.0
    color : Colors.black
    fill: Colors.none
 }
  override b.mark = Path {
    pathData : arc("open", startB, endB, (b.radius, b.radius), 0, 0, sweepB)
    strokeWidth : 2.0
    color : Colors.black
    fill: Colors.none
 }
}

Angle a, b
where EqualAngleMarker2(a, b) {
  startA = ptOnLine(a.q, a.p, a.radius)
  endA = ptOnLine(a.q, a.r, a.radius)
  sweepA = arcSweepFlag(a.q, startA, endA)

  startB = ptOnLine(b.q, b.p, b.radius)
  endB = ptOnLine(b.q, b.r, b.radius)
  sweepB = arcSweepFlag(b.q, startB, endB)

  override a.mark = Path {
    pathData : arc("open", startA, endA, (a.radius, a.radius), 0, 0, sweepA)
   strokeWidth : 2.0
    color : Colors.black
    fill: Colors.none
 }
  override b.mark = Path {
    pathData : arc("open", startB, endB, (b.radius, b.radius), 0, 0, sweepB)
    strokeWidth : 2.0
    color : Colors.black
    fill: Colors.none
 }

  bigR = const.bigThetaRadius
  startAbig = ptOnLine(a.q, a.p, bigR)
  endAbig = ptOnLine(a.q, a.r, bigR)

  startBbig = ptOnLine(b.q, b.p, bigR)
  endBbig = ptOnLine(b.q, b.r, bigR)

  override a.mark2 = Path {
    pathData : arc("open", startAbig, endAbig, (bigR, bigR), 0, 0, sweepA)
    strokeWidth : 2.0
    color : Colors.black
    fill: Colors.none
 }
  override b.mark2 = Path {
    pathData : arc("open", startBbig, endBbig, (bigR, bigR), 0, 0, sweepB)
    strokeWidth : 2.0
    color : Colors.black
    fill: Colors.none
 }

}
Angle a, b
where EqualAngle(a, b) {
  -- make sure angle a is equal to angle b
  dotA = dot(normalize(a.p - a.q), normalize(a.r - a.q))
  dotB = dot(normalize(b.p - b.q), normalize(b.r - b.q))
  ensure equal(dotA, dotB)
}

Angle a
where RightUnmarked(a) {
  ensure equal(dot(a.p - a.q, a.r - a.q), 0)
}

Angle a
where RightMarked(a) {
  --render half square path of size a.radius
  override a.mark = Path {
    pathData : pathFromPoints("open", [ptOnLine(a.q, a.p, 20.), innerPointOffset(a.q, a.p, a.r, 20.), ptOnLine(a.q, a.r, 20.)])
    strokeWidth : 2.0
    color : Colors.black
    fill : Colors.none
  }
  ensure equal(dot(a.p - a.q, a.r - a.q), 0)
}

Segment e; Plane p {
  e.icon above p.icon
}

Triangle t; Plane P 
where t := MkTriangle(p, q, r)
with Point p; Point q; Point r {
  t.side1 above P.icon
  t.side2 above P.icon
  t.side3 above P.icon
}

Triangle t
where t := MkTriangle(p, q, r)
with Point p; Point q; Point r {
     t.color = setOpacity(Colors.darkpurple, 0.4)
     t.side1 = Line {
     	 start : p.icon.center
     	 end : q.icon.center
	     color : t.color
	     thickness : const.strokeWidth
	     stroke : "none"
	     style : "solid"
     }
     t.side2 = Line {
       start : q.icon.center
       end : r.icon.center
	     color : t.color
	     thickness : const.strokeWidth
	     stroke : "none"
	     style : "solid"
     }
     t.side3 = Line {
     	 start : p.icon.center
     	 end : r.icon.center
	     color : t.color
	     thickness : const.strokeWidth
	     stroke : "none"
	     style : "solid"
     }
}

-- -- Should the rectangle be constructed from the points, or vice versa?
Rectangle R
where R := MkRectangle(p, q, r, s); In(p, P)
with Point p; Point q; Point r; Point s; Plane P  {
  override R.color = setOpacity(Colors.blue, 0.2)

  R.icon = Path {
    pathData : pathFromPoints("closed", [p.icon.center, q.icon.center, r.icon.center, s.icon.center])
    strokeWidth : const.strokeWidth
    fill : R.color
    color : Colors.black
  }

  ensure equal(vdist(p.icon.center, q.icon.center), vdist(r.icon.center, s.icon.center))
  ensure equal(vdist(p.icon.center, s.icon.center), vdist(q.icon.center, r.icon.center))
  ensure equal(vdist(p.icon.center, s.icon.center), vdist(q.icon.center, r.icon.center))
  ensure equal(dot(p.icon.center - q.icon.center, q.icon.center - r.icon.center), 0)
  ensure equal(dot(q.icon.center - r.icon.center, r.icon.center - s.icon.center), 0)
  -- ensure lessThan(10.0, norm(p.icon.center - q.icon.center))
  -- ensure lessThan(10.0, norm(q.icon.center - r.icon.center))

  R.icon above P.icon
}

Angle theta
where theta := InteriorAngle(p, q, r)
with Point p; Point q; Point r {
  theta.p = p.vec
  theta.q = q.vec
  theta.r = r.vec
  theta.color = Colors.black
  theta.side1 = Line {
    start : p.icon.center
    end : q.icon.center
    color : theta.color
    thickness : const.strokeWidth
    stroke : 2.
    style : "solid"
  }
  theta.side2 = Line {
    start : q.icon.center
    end : r.icon.center
    color : theta.color
    thickness : const.strokeWidth
    stroke : 2.
    style : "solid"
  }
  theta.radius = const.thetaRadius
  encourage nonDegenerateAngle(p.icon, q.icon, r.icon)
}
 --    theta.radius = const.thetaRadius
--     -- TODO: always take the acute angle, not the obtuse angle
--     theta.arcPath = arcPathEuclidean(p.vec, q.vec, r.vec, theta.radius, "Closed")
--
--     theta.shape = Path {
--       pathData : polygonFromPoints(theta.arcPath)
--      strokeWidth : const.strokeWidth
--       color : Colors.darkpurple
--       fill : setOpacity(Colors.white, 0.5)
--     }

--     theta.icon above const.plane
--     theta.icon below p.icon
--     theta.icon below q.icon
--     theta.icon below r.icon

--     -- TODO: or could be minimum constraint function
--     encourage repel(q.icon, r.icon, 100.0)
-- }

-- -- We don't know if the points in the triangle actually include the points in the square or not
-- -- TODO: this doesn't seem to match -- and the matches take way too long!!

-- -- Square S
-- -- where S := MkSquare(p, q, r, s); Disjoint(S, T); T := MkTriangle(a, b, c)
-- -- with Point p; Point q; Point r; Point s; Triangle T; Point a; Point b; Point c {

-- -- Need overrides because Square <: Rectangle

-- Square S
-- where S := MkSquare(p, q, r, s)
-- with Point p; Point q; Point r; Point s {

--      -- Assuming (p,q) are the segment of a triangle
--      -- TODO: this should really do that match in Style...
--      -- and r,s are the other two points of the square

--     override S.color = setOpacity(Colors.midnightblue, 0.4)

--     S.path = squareAt(p.vec, q.vec)

--     override S.shape = Path {
-- 	    pathData : polygonFromPoints(S.path)
-- 	    -- Assumes that the last two points are the new corners (r, s) that need to be set
-- 	    strokeWidth : const.strokeWidth
-- 	    fill : S.color
-- 	    color : Colors.black
-- 	    rotation : 0.0
--     }

--     -- Position the points at the corner of the square
--     override r.vec = get(S.path, 2)
--     override r.x = get(r.vec, 0)
--     override r.y = get(r.vec, 1)

--     override s.vec = get(S.path, 3)
--     override s.x = get(s.vec, 0)
--     override s.y = get(s.vec, 1)
-- }

-- -- These more specific matches are so we can figure out which third point of the triangle to push the square away from
-- -- Note: order of the variables really matters!

-- Square S
-- where S := MkSquare(p, q, r, s); Disjoint(S, T); T := MkTriangle(c, q, p)
-- with Point p; Point q; Point r; Point s; Triangle T; Point c {

--     override S.path = squareAt(p.vec, q.vec, c.vec)
-- }

-- Square S
-- where S := MkSquare(p, q, r, s); Disjoint(S, T); T := MkTriangle(q, p, c)
-- with Point p; Point q; Point r; Point s; Triangle T; Point c {

--     override S.path = squareAt(p.vec, q.vec, c.vec)
-- }

-- Square S
-- where S := MkSquare(p, q, r, s); Disjoint(S, T); T := MkTriangle(p, c, q)
-- with Point p; Point q; Point r; Point s; Triangle T; Point c {

--     override S.path = squareAt(p.vec, q.vec, c.vec)
-- }


-- Angle theta
-- where theta := InteriorAngle(q, p, r); Right(theta)
-- with Point p; Point q; Point r {
--       override theta.perpSize = 13.0

--       -- override theta.shape = Path {
--       -- 		 pathData : perpPath(q.vec, p.vec, r.vec, theta.perpSize)
--       -- 		 strokeWidth : 1.25
--       -- 		 color : Colors.black
--       -- 		 fill : setOpacity(Colors.white, 0.5)
--       -- }

--       ensure perpendicular(q.vec, p.vec, r.vec)
-- }

-- Ray r {
--     r.length = const.rayLength
-- }

-- Point p
-- where p := Midpoint(s)
-- with Segment s {
--      override p.icon.x = midpointX(s.icon)
--      override p.icon.y = midpointY(s.icon)

--      override p.icon.strokeWidth = 1.0
--      override p.icon.color = Colors.white
--      override p.icon.r = 3.2
--      p.midLayering = p.icon above s.icon
-- }

-- Ray r
-- with Angle theta; Point x; Point y; Point z
-- where r := Bisector(theta); theta := InteriorAngle(y, x, z) {

--       r.tail = [x.x, x.y]
--       r.head = angleBisectorEuclidean(x.vec, y.vec, z.vec, r.length)

--       r.icon = Line {
--       	      startX : x.x
-- 	      startY : x.y
-- 	      -- TODO: figure out how long this should be
-- 	      -- TODO: calculate this location properly; WRT the angle and the non-origin endpoints; this is just a heuristic
-- 	      endX : get(r.head, 0)
-- 	      endY : get(r.head, 1)
-- 	      thickness : const.strokeWidth
-- 	      color : Colors.darkpurple
--       	      rightArrowhead : True
-- 	      arrowheadSize : const.arrowheadSize
--       }

--       -- Bisect the arc twice more to get the bisector mark locations
--       -- Throw away z coordinate for each
--       theta.bisectpt1 = angleBisectorEuclidean(x.vec, y.vec, r.head, theta.radius)
--       theta.bisectpt2 = angleBisectorEuclidean(x.vec, z.vec, r.head, theta.radius)
--       theta.markLen = 10.0

--       -- Angle bisector marks: two tick marks
--       theta.bisectMark1 = Path {
--       	      pathData : makeBisectorMark(theta.bisectpt1, x.vec, theta.markLen)
--       	      strokeWidth : const.strokeWidth
--       	      fill : Colors.none
--       	      color : Colors.darkpurple
--       	      rotation : 0.0
--       	      rightArrowhead : False
--       	      arrowheadSize : 0.0
--       }

--       theta.bisectMark2 = Path {
--       	      pathData : makeBisectorMark(theta.bisectpt2, x.vec, theta.markLen)
--       	      strokeWidth : const.strokeWidth
--       	      fill : Colors.none
--       	      color : Colors.darkpurple
--       	      rotation : 0.0
--       	      rightArrowhead : False
--       	      arrowheadSize : 0.0
--       }

--       theta.layeringMark1 = theta.bisectMark1 above theta.icon
--       theta.layeringMark2 = theta.bisectMark2 above theta.icon
--       r.layering = r.icon above const.plane
-- }

-- Ray r
-- with Linelike s; Point m
-- where r := PerpendicularBisector(s); m := Midpoint(s) {

--       r.icon = Line {
--       	      startX : midpointX(s.icon)
-- 	      startY : midpointY(s.icon)
-- 	      endX : perpX(s.icon, r.icon.startX, r.icon.startY, r.length)
-- 	      endY : perpY(s.icon, r.icon.startX, r.icon.startY, r.length)
-- 	      thickness : const.strokeWidth
-- 	      color : Colors.darkpurple
-- 	      style : "dotted"
--       	      rightArrowhead : True
-- 	      arrowheadSize : const.arrowheadSize
--       }

--       r.perpSize = 10.0

--       r.perpMark = Path {
--       		 pathData : perpPath(r.shape, s.shape, (r.shape.startX, r.shape.startY), r.perpSize)
-- 		 strokeWidth : 1.25
-- 		 color : Colors.black
-- 		 fill : setOpacity(Colors.white, 0.5)
--       }

--       r.layering1 = r.icon above const.plane
--       r.layering2 = r.perpMark above const.plane

--       r.markLayering1 = r.perpMark below s.icon
--       r.markLayering2 = r.perpMark below r.icon
--       -- r.markLayering3 = r.perpMark above const.sphere
--       r.markLayering4 = r.perpMark below p.icon
--       r.markLayering5 = r.perpMark below q.icon
--       r.markLayering6 = r.perpMark below r.icon
--       r.markLayering7 = r.perpMark below m.icon

--      labelAvoidFn_Mark = encourage repel(r.icon, m.text, const.repelWeight)
--      labelAvoidFn_Ray = encourage repel(r.perpMark, m.text, const.repelWeight)
--      labelAvoidFn_Seg = encourage repel(s.icon, m.text, const.repelWeight)
-- }

-- -- TODO: trying to just add a repel function on the point that's not in a segment... this might be too many repels for the ones that are in a segment though

-- -- TODO: should we use const.repelWeight below?

-- Ray r; Point p {
--     labelAvoidFn = encourage repel(r.icon, p.text, const.repelWeight)
--     layering = r.icon below p.icon
-- }

-- Segment s; Point p {
--      -- TODO: Maybe the optimization would be faster if I used lines instead of curves for the segments?	
--      labelAvoidFn_p = encourage repel(s.icon, p.text, const.repelWeight)
-- }

-- Triangle t; Point p {
--     layering1 = t.icon below p.icon
--     layering2 = t.icon below p.text
-- }

-- Square s; Point p {
--     layering1 = s.icon below p.icon
--     layering2 = s.icon below p.text
-- }

-- Rectangle r; Point p {
--     layering1 = r.icon below p.icon
--     layering2 = r.icon below p.text
-- }

-- Triangle t; Segment e {
--     layering1 = t.icon below e.icon
-- }

-- Square s; Segment e {
--     layering1 = s.icon below e.icon
-- }

-- Rectangle r; Segment e {
--     layering1 = r.icon below e.icon
-- }

-- Triangle t; Angle theta {
-- 	 layering = theta.icon above t.icon
-- }

--- -----------------------------------------------------------------------------

-- -- TODO: Take the altitude at a particular angle that happens to be right
-- -- Might not need to specify the angle if we know the triangle's right
-- Segment e
-- where e := Altitude(t, theta); Right(theta); theta := InteriorAngle(q, p, r) -- `p` is the point of the angle
-- with Triangle t; Angle theta; Point p; Point q; Point r {

--      e.color = Colors.black
--      e.proj_pt = project(q.vec, p.vec, r.vec)

--      e.icon = Line {
--      	     startX : p.x
--      	     startY : p.y
--      	     endX : get(e.proj_pt, 0)
--      	     endY : get(e.proj_pt, 1)
-- 	     style : "dashed"
-- 	     color : e.color
-- 	     thickness : const.strokeWidth
-- 	     stroke : "none"
--      }

--      -- TODO: layering
-- }

-- -- Set the location of an endpoint of an altitude to be the result of the altitude on the edge
-- Point p
-- with Segment e; Triangle t; Angle theta
-- where p := Endpoint(e); e := Altitude(t, theta) {

--       override p.x = get(e.proj_pt, 0)
--       override p.y = get(e.proj_pt, 1)
-- }

-- -- Special case for KL
-- Point p
-- with Segment ba; Segment cp; Point a; Point b; Point c
-- where ba := MkSegment(b, a); On(p, ba); cp := MkSegment(c, p); Perpendicular(cp, ba) {

--       -- BA is the existing segment; C is an existing point that defines the angle
--       -- p's location is really another altitude of the angle ACB
--       override p.vec = project(a.vec, c.vec, b.vec) 
--       override p.x = get(p.vec, 0)
--       override p.y = get(p.vec, 1)
-- }- -- TODO: Appendices removed for now