import {
  compileTrio,
  PenroseState,
  prepareState,
  RenderStatic,
  resample,
  showError,
  stepUntilConvergence,
} from "@penrose/core";
import * as React from "react";
import { useEffect, useState } from "react";
import styled from "styled-components";
import Logo from "./icons/Logo";
import Resample from "./icons/Resample";

const EmbedContainer = styled.div`
  position: relative;
  border-radius: 10px;
  border: 0.5px solid rgba(0, 0, 0, 0.2);
  box-shadow: 0 5px 8px 0 rgba(0, 0, 0, 0.2);
  overflow: hidden;
`;

const EmbedFooter = styled.div`
  display: flex;
  overflow: hidden;
  justify-content: space-between;
  padding: 0 1em;
  align-items: center;
  background-color: #40b4f7;
  border-radius: 0 0 9px 9px;
`;

const Text = styled.p`
  font-family: "Open Sans", sans-serif;
  color: white;
  margin: 0.7em;
  font-weight: lighter;
  font-size: smaller;
`;

interface IEmbedProps {
  domainString: string;
  substanceString: string;
  styleString: string;
  initState?: PenroseState;
}

const Embed = (props: IEmbedProps) => {
  const [state, setState] = useState(undefined as PenroseState | undefined);
  useEffect(() => {
    const { domainString, substanceString, styleString } = props;
    if (!state) {
      getInitState(domainString, substanceString, styleString);
    }
  });

  const getInitState = async (dsl: string, sub: string, sty: string) => {
    const compilerResult = compileTrio(dsl, sub, sty);
    if (compilerResult.isOk()) {
      const initState: PenroseState = await prepareState(compilerResult.value);
      const stepped = stepUntilConvergence(initState);
      if (stepped.isOk()) {
        setState(stepped.value);
      } else {
        console.log(showError(stepped.error));
      }
    } else {
      console.log(showError(compilerResult.error));
    }
  };

  const resampleState = (): void => {
    const NUM_SAMPLES = 1;
    const oldState = state;
    if (oldState) {
      const resampled = resample(oldState, NUM_SAMPLES);
      const converged = stepUntilConvergence(resampled);
      setState(converged.value);
    }
  };

  if (!state) {
    return <div>rendering...</div>;
  }
  return (
    <EmbedContainer>
      <div
        style={{ width: "100%", height: "100%" }}
        dangerouslySetInnerHTML={{
          __html: RenderStatic(state).outerHTML,
        }}
      />
      <EmbedFooter>
        <Logo width={24} color={"white"} />

        <Text>
          Generated by Penrose with{" "}
          <span role="img" aria-label="heart">
            ðŸ’œ
          </span>
        </Text>
        <div onClick={resampleState}>
          <Resample size={24} color={"white"} />
        </div>
      </EmbedFooter>
    </EmbedContainer>
  );
};

export default Embed;
