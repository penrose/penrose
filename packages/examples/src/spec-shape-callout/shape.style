-- Visualize the construction of callout boxes, as in Callout.ts

canvas {
  width = 800
  height = 700
}

global {
       nodeR = 6.

       lineThickness = 3.

       calloutPadding = 30. -- Padding around the text for rect
       calloutThickness = 30. -- Thickness of base of stem
       calloutEndPadding = 40. -- Space between the external anchor point and the stem
       maxCalloutDist = 200.
}

colors {
       black = rgba(0., 0., 0., 1.)
       red = rgba(1., 0., 0., 1.)
       green = rgba(0., 1., 0., 1.)
       blue = rgba(0., 0., 1., 1.)
       none = none()
}

forall Node n {
     n.shape = Circle { 
             r: global.nodeR
             strokeWidth: 0.
             fillColor: colors.black
     }

     n.text = Equation {
            string: n.label
     }

     n.callout = Rectangle {
               strokeWidth: global.lineThickness
               strokeColor: colors.black
               fillColor: colors.none
               center: n.text.center
               width: n.text.width + global.calloutPadding
               height: n.text.height + global.calloutPadding
     }

     -- Parallel to callout direction
     vec = normalize(n.callout.center - n.shape.center)

     n.anchorStart = n.shape.center + global.calloutEndPadding * vec

     -- Thick line
     n.line = Line {
            start: n.anchorStart
            end: n.callout.center
            strokeWidth: global.calloutThickness
            strokeColor: rgba(0.5, 0.5, 0.5, 0.5)
     }

     -- Thin line
     n.line1 = Line {
             start: n.anchorStart
             end: n.callout.center
             strokeWidth: global.lineThickness
             strokeColor: colors.black
     }

     n.line1 above n.line

     -- Perpendicular location - start of segment
     segStart = n.anchorStart + global.calloutThickness / 2. * rot90(vec)
     n.circle1 = Circle {
               fillColor: colors.red
               r: 5.
               strokeWidth: 0.
               center: segStart
     }

     -- Seg endpt
     t = norm(n.callout.center - n.anchorStart)
     segEnd = segStart + t * vec

     n.circle2 = Circle {
               fillColor: colors.red
               r: 5.
               strokeWidth: 0.
               center: segEnd
     }

     -- hit point 1
     n.circle3 = Circle {
               fillColor: colors.blue
               r: 5.
               strokeWidth: 0.
               -- center: 
     }

     dist = norm(n.callout.center - n.shape.center)
     ensure lessThan(dist, 200.)

     -- TODO: Doesn't work so well
     -- ensure disjoint(n.callout, n.shape)
}
