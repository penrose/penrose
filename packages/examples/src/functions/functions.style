canvas {
  width = 600
  height = 400
}

-- layout = []

colors {
  black = #000000
  white = #ffffff
}

constants {
  pointRadius = 4
  lineThickness = 4
}

coordSystem {
  center = ( ?, ? )
  xAxis = Line {
    start: ( - 0.5 * canvas.width, center[1] )
    end: ( 0.5 * canvas.width, center[1] )
    thickness: constants.lineThickness
    strokeColor: colors.black
  }
  yAxis = Line {
    start: ( center[0], - 0.5 * canvas.height )
    end: ( center[0],  0.5 * canvas.height )
    thickness: constants.lineThickness
    strokeColor: colors.black
  }
}

forall Point p {
  p.coords = (?, ?)
  p.dot = Circle {
    center: p.coords
    r: constants.pointRadius
  }
}

forall Coord c {
  c.value = ?
}

forall CoordX c {
  c.dot = Circle {
    center: (c.value, coordSystem.center[1])
    r: constants.pointRadius
  }
}

forall CoordY c {
  c.dot = Circle {
    center: (coordSystem.center[0], c.value)
    r: constants.pointRadius
  }
}

forall Point p; CoordY c where hasCoord(p, c) {
  c.dot.fillColor = p.dot.fillColor
  c.value = p.coords[1]
  c.line = Line {
    start: c.dot.center
    end: p.dot.center
    strokeStyle: "dashed"
    thickness: constants.lineThickness
    strokeColor: p.dot.fillColor
  }
}

forall Point p; CoordX c where hasCoord(p, c) {
  c.dot.fillColor = p.dot.fillColor
  c.value = p.coords[0]
  c.line = Line {
    start: c.dot.center
    end: p.dot.center
    strokeStyle: "dashed"
    thickness: constants.lineThickness
    strokeColor: p.dot.fillColor
  }
}

forall Coord c1; Coord c2 where isGreaterCoord(c1, c2) {
  ensure lessThan(c1.value, c2.value - 5)
}

forall Function f {

  vec2 pStart = (coordSystem.xAxis.start[0], ?)
  vec2 p0 = (?, ?)
  vec2 p1 = (?, ?)
  vec2 p2 = (?, ?)
  vec2 p3 = (?, ?)
  vec2 p4 = (?, ?)
  vec2 p5 = (?, ?)
  vec2 p6 = (?, ?)
  vec2 p7 = (?, ?)
  vec2 p8 = (?, ?)
  vec2 p9 = (?, ?)
  vec2 p10 = (?, ?)
  vec2 p11 = (?, ?)
  vec2 p12 = (?, ?)
  vec2 p13 = (?, ?)
  vec2 p14 = (?, ?)
  vec2 p15 = (?, ?)
  vec2 p16 = (?, ?)
  vec2 p17 = (?, ?)
  vec2 p18 = (?, ?)
  vec2 p19 = (?, ?)
  vec2 pEnd = (coordSystem.xAxis.end[0], ?)

  shape f.poly = Polyline {
    points: [pStart, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, pEnd]
    strokeWidth: 2
  }

    encourage equal(perimeter(f.poly.points, false), 1.05 * vdist(pStart, pEnd))
  encourage minimal(elasticEnergy(f.poly.points, false))
  encourage isEquilateral(f.poly)
  --   ensure isFunction(f.poly)
}

forall Function f; Point p where hasPoint(f, p) {
  ensure overlapping(p.dot, f.poly). -- todo: improve
}
