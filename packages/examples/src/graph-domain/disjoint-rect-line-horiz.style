-- Get all lines and boxes to be disjoint from each other. (AABB - horizontal axis-aligned bounding boxes)
canvas {
  width = 800
  height = 700
}

Colors {
    black = rgba(0.0, 0.0, 0.0, 1.0)
    gray = rgba(0.8, 0.8, 0.8, 1.0)
    red = rgba(1.0, 0.0, 0.0, 1.0)
    pink = rgba(1.0, 0.4, 0.7, 1.0)
    yellow = rgba(1.0, 1.0, 0.0, 1.0)
    orange = rgba(1.0, 0.6, 0.0, 1.0)
    green = rgba(0.0, 1.0, 0.0, 1.0)
    blue = rgba(0.0, 0.0, 1.0, 1.0)
    sky = rgba(0.325, 0.718, 0.769, 1.0)
    cyan = rgba(0.0, 1.0, 1.0, 1.0)
    purple = rgba(0.5, 0.0, 0.5, 1.0)
    white = rgba(1.0, 1.0, 1.0, 1.0)
    none = none()
}

global {
    padding = 20.0
    stroke = 2.0
    width = 600.
    box = Rectangle {
        center: (0., 0.)
        width: global.width + 300.
        height: global.width
        fillColor: Colors.none
        strokeColor: Colors.black
    }
    vertexWidth = 100.
}

forall Vertex V {
       V.x = ?
       V.y = ?

       V.xpad = 0.
       V.ypad = 60.

       V.shape = Rectangle { 
         center: (V.x, V.y)
         width: global.vertexWidth + V.xpad
         height: global.vertexWidth + V.ypad
         fillColor : Colors.none
         strokeWidth : 2.
         strokeColor: Colors.black
       }

       V.text = Equation {
	 center: V.shape.center
	 string : V.label
	 fillColor : Colors.black
       }

       ensure contains(global.box, V.shape)

       V.text above V.shape
       V.shape above global.box
}

forall Edge e {
       e.len = 200.
       e.center = ?
       e.y = ?

       e.left = -e.len/2. + e.center
       e.right = e.len/2. + e.center

       e.shape = Line {
                  start: (e.left, e.y)
                  end: (e.right, e.y)
                  strokeWidth: 10.
       }

       e.text = Equation {
	 center: (e.shape.start + e.shape.end) / 2.
	 string : e.label
	 fillColor : Colors.black
       }

       ensure contains(global.box, e.shape)
}

forall Edge `e2` {
     override `e2`.len = 100.
}

forall Vertex `v1` {
       override `v1`.shape.width = 500.
}

forall Vertex v1; Vertex v2 {
       ensure disjoint(v1.shape, v2.shape, 0.)
}

forall Vertex v; Edge e {
       ensure disjoint(v.shape, e.shape)
}
