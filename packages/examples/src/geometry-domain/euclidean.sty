canvas {
  width = 800
  height = 700
}

Colors {
    -- Keenan palette
    black = rgba(0.0, 0.0, 0.0, 1.0)

    darkpurple = rgba(0.549,0.565,0.757, 1.0)
    purple2 = rgba(0.106, 0.122, 0.54, 0.2)
    lightpurple = rgba(0.816,0.824, 0.902, 1.0)

    verylightpurple = rgba(0.953, 0.957, 0.977, 1.0)
    purple3 = rgba(0.557, 0.627, 0.769, 1.0)

    midnightblue = rgba(0.14, 0.16, 0.52, 1.0)
    lightslategray = rgba(0.50, 0.51, 0.69, 1.0)
    silver = rgba(0.71, 0.72, 0.79, 1.0)
    gainsboro = rgba(0.87, 0.87, 0.87, 1.0)

    darkgray = rgba(0.1, 0.1, 0.1, 1.0)
    mediumgray = rgba(0.5, 0.5, 0.5, 1.0)
    gray = rgba(0.8, 0.8, 0.8, 1.0)
    red = rgba(1.0, 0.0, 0.0, 1.0)
    pink = rgba(1.0, 0.4, 0.7, 1.0)
    yellow = rgba(1.0, 1.0, 0.0, 1.0)
    orange = rgba(1.0, 0.6, 0.0, 1.0)
    lightorange = rgba(1.0, 0.6, 0.0, 0.25)
    green = rgba(0.0, 1.0, 0.0, 1.0)
    blue = rgba(0.0, 0.0, 1.0, 1.0)
    sky = rgba(0.325, 0.718, 0.769, 1.0)
    lightsky = rgba(0.325, 0.718, 0.769, 0.25)
    lightblue = rgba(0.0, 0.0, 1.0, 0.25)
    cyan = rgba(0.0, 1.0, 1.0, 1.0)
    purple = rgba(0.5, 0.0, 0.5, 1.0)
    white = rgba(1.0, 1.0, 1.0, 1.0)
    none = none()
    bluegreen = rgba(0.44, 0.68, 0.60, 1.0)
}

const {
    pi = 3.14159
    arrowheadSize = 0.65
    strokeWidth = 1.75
    textPadding = 7.0
    textPadding2 = 25.0
    repelWeight = 0.7 -- TODO: Reverted from 0.0
    repelWeight2 = 0.5
    fontSize = "13.5px"
    containPadding = 50.0
    rayLength = 100.0
    pointSize = 4.0
    pointStroke = 0.0
    thetaRadius = 30.0
    bigThetaRadius = 40.0
    circleRadius = 150.0
}

--Plane
Plane p {
  dim = 700.0
  p.text = Equation {
    center : ((dim / 2.0) - const.textPadding2, (dim / 2.0) - const.textPadding2)
    string : p.label
    fontSize : const.fontSize
  }

  -- inner: #f3f4f9, outer: #8e93c4
  p.icon = Rectangle {
    -- angle : 0.0
    -- fillColor : Colors.purple2
    fillColor : Colors.none -- TODO: arrange angle markers so plane can be opaque
    strokeColor : Colors.purple3
    strokeWidth : 2.0
    center : (0.0, 0.0)
    width : dim
    height : dim
  }

  p.text above p.icon
}

--Point
Point p {
  p.x = ?
  p.y = ?
  p.vec = (p.x, p.y)
  p.color = Colors.black

    p.icon = Circle {
      center: p.vec
      r : const.pointSize
      fillColor : Colors.black
      strokeWidth : 0.0
      strokeColor : Colors.black
    }

    p.text = Equation {
      string : p.label
      rotation : 0.0
      fillColor : Colors.black
      fontSize : const.fontSize
    }
    ensure atDist(p.icon, p.text, const.textPadding)
}

Point p
with Plane P
where In(p, P) {
  -- TODO: the problem is that this ensures the padding is const? Or is > padding okay?
  -- There's a choice of whether to put padding on the point or the text for containment
  ensure contains(P.icon, p.icon, const.containPadding)
  ensure contains(P.icon, p.text, 0.0)

  p.icon above P.icon
  p.text above P.icon
}

Point p, q, r
where Collinear(p, q, r) {
  ensure collinear(p.icon.center, q.icon.center, r.icon.center)
  encourage repel(p.icon, q.icon, const.repelWeight)
  encourage repel(q.icon, r.icon, const.repelWeight)
}

--Linelike
Linelike l {
  l.color = Colors.black

  l.icon = Line {
    start : (?, ?)
    end : (?, ?)
    strokeColor : l.color
    strokeWidth : const.strokeWidth
    style : "solid"
  }
}

Ray r
where r := MkRay(base, direction)
with Point base; Point direction {
  r.start = base.vec
  r.end = direction.vec
  r.vec = direction.vec - base.vec

  override r.icon = Line {
    start : base.icon.center
    end : ptOnLine(base.vec, direction.vec, norm(r.vec) + 40.)
    strokeColor : r.color
    strokeWidth : const.strokeWidth
    style : "solid"
    arrowheadStyle: "arrowhead-2"
    endArrowhead : true
    startArrowhead : false
    arrowheadSize: const.arrowheadSize
  }

}

Line l
where l := MkLine(p, q)
with Point p; Point q {
  l.start = p.vec
  l.end = q.vec
  l.vec = (q.x - p.x, q.y - p.y)
  override l.icon = Line {
    start : ptOnLine(p.vec,q.vec, -40.)
    end : ptOnLine(p.vec, q.vec, norm(l.vec) + 40.)
    strokeColor : l.color
    strokeWidth : const.strokeWidth
    style : "solid"
    arrowheadStyle: "arrowhead-2"
    endArrowhead : true
    startArrowhead : true
    arrowheadSize: const.arrowheadSize
  }
}

Linelike l1, l2 -- should this work with rays and lines?
where ParallelMarker1(l1, l2) {
  l1.tick1 = Path {
    d : pathFromPoints("open", chevron(l1.icon, 20., 6))
    strokeWidth : 2.0
    strokeColor : Colors.black
    fillColor : Colors.none
  }
  l2.tick1 = Path {
    d : pathFromPoints("open", chevron(l2.icon, 20., 5))
    strokeWidth : 2.0
    strokeColor : Colors.black
    fillColor : Colors.none
  }
}

Linelike l1, l2
where Parallel(l1, l2) {
  -- make slopes 
  l1s = (l1.icon.end[1]-l1.icon.start[1])/(l1.icon.end[0]-l1.icon.start[0]) * 10000
  l2s = (l2.icon.end[1]-l2.icon.start[1])/(l2.icon.end[0]-l2.icon.start[0]) * 10000
  -- ensure equal(normalize(l1.vec) * 10000, normalize(l2.vec) * 10000)
  ensure equal(l1s, l2s)
}
--Segment
Segment e
where e := MkSegment(p, q)
with Point p; Point q {
  override e.vec = [q.x - p.x, q.y - p.y]
  e.start = p.vec
  e.end = q.vec

  override e.icon = Line {
    start : p.icon.center
    end : q.icon.center
    strokeColor : e.color
    strokeWidth : const.strokeWidth
    style : "solid"
  }

  p.icon above e.icon
  q.icon above e.icon

  encourage pointLineDist(p.text.center, e.icon, 30.)
  encourage pointLineDist(q.text.center, e.icon, 30.)
}

Segment e; Plane p {
  e.icon above p.icon
}

Linelike s, t
where EqualLength(s, t) {
  encourage equal(vdist(s.icon.start, s.icon.end), vdist(t.icon.start, t.icon.end))
}

--TODO eventually this should also provide an equal length marker since it is bisecting the segment
Segment s
where s := PerpendicularBisector(s2, p)
with Segment s2; Point p {
  override s.icon = Line {
    start : p.icon.center
    end : midpoint(s2.icon.start, s2.icon.end)
    strokeColor : s.color
    strokeWidth : const.strokeWidth
    style : "solid"
  }
  startA = ptOnLine(s.icon.end, s.icon.start, const.thetaRadius)
  endA = ptOnLine(s.icon.end, s2.icon.end, const.thetaRadius)
  sweepA = arcSweepFlag(s.icon.end, startA, endA)

  s.mark = Path {
    d : pathFromPoints("open", [ptOnLine(s.icon.end, s.icon.start, 20.), innerPointOffset(s.icon.end, s.icon.start, s2.icon.end, 20.), ptOnLine(s.icon.end, s2.icon.end, 20.)])
    strokeWidth : 2.0
    strokeColor : Colors.black
    fillColor : Colors.none
  }

  ensure perpendicular(s.icon.start, s.icon.end, s2.icon.end)
}

Segment s
where s := PerpendicularBisectorLabelPts(s2, p1, p2)
with Segment s2; Point p1, p2 {
  override p2.vec = midpoint(s2.icon.start, s2.icon.end)
  override s.icon = Line {
    start : p1.icon.center
    end : p2.vec
    strokeColor : s.color
    strokeWidth : const.strokeWidth
    style : "solid"
  }
  startA = ptOnLine(s.icon.end, s.icon.start, const.thetaRadius)
  endA = ptOnLine(s.icon.end, s2.icon.end, const.thetaRadius)
  sweepA = arcSweepFlag(s.icon.end, startA, endA)

  s.mark = Path {
    d : pathFromPoints("open", [ptOnLine(s.icon.end, s.icon.start, 20.), innerPointOffset(s.icon.end, s.icon.start, s2.icon.end, 20.), ptOnLine(s.icon.end, s2.icon.end, 20.)])
    strokeWidth : 2.0
    strokeColor : Colors.black
    fillColor : Colors.none
  }

  ensure perpendicular(s.icon.start, s.icon.end, s2.icon.end)
}

-- NOTE: Get rid of repetition
Linelike s, t 
where EqualLengthMarker1(s, t) {
  override s.tick = Path {
    d : ticksOnLine(s.icon.start, s.icon.end, 15., 1, 10.)
    strokeWidth : 2.0
    strokeColor : Colors.black
    fillColor: Colors.none
  }
  override t.tick = Path {
    d : ticksOnLine(t.icon.start, t.icon.end, 15., 1, 10.)
    strokeWidth : 2.0
    strokeColor : Colors.black
    fillColor: Colors.none
  }
  s.tick above s.icon
  t.tick above t.icon
}

-- NOTE: Get rid of repetition
Linelike s, t 
where EqualLengthMarker2(s, t) {
  --need slope of line, then need to equally distribute the tick marks
  override s.tick = Path {
    d : ticksOnLine(s.icon.start, s.icon.end, 15., 2., 10.)
    strokeWidth : 2.0
    strokeColor : Colors.black
    fillColor: Colors.none
  }
  override t.tick = Path {
    d : ticksOnLine(t.icon.start, t.icon.end, 15., 2., 10.)
    strokeWidth : 2.0
    strokeColor : Colors.black
    fillColor: Colors.none
  }
  s.tick above s.icon
  t.tick above t.icon
}

-- NOTE: Get rid of repetition
Linelike s, t 
where EqualLengthMarker3(s, t) {
  --need slope of line, then need to equally distribute the tick marks
  override s.tick = Path {
    d : ticksOnLine(s.icon.start, s.icon.end, 15., 3, 10.)
    strokeWidth : 2.0
    strokeColor : Colors.black
    fillColor: Colors.none
  }
  override t.tick = Path {
    d : ticksOnLine(t.icon.start, t.icon.end, 15., 3, 10.)
    strokeWidth : 2.0
    strokeColor : Colors.black
    fillColor: Colors.none
  }
  s.tick above s.icon
  t.tick above t.icon
}

--Angle
Angle theta
where theta := InteriorAngle(p, q, r)
with Point p; Point q; Point r {
  theta.p = p.vec
  theta.q = q.vec
  theta.r = r.vec
  theta.color = setOpacity(Colors.darkpurple, 0.4)
  theta.side1 = Line {
    start : p.icon.center
    end : q.icon.center
    strokeColor : theta.color
    strokeWidth : const.strokeWidth
    style : "solid"
  }
  theta.side2 = Line {
    start : q.icon.center
    end : r.icon.center
    strokeColor : theta.color
    strokeWidth : const.strokeWidth
    style : "solid"
  }
  theta.radius = const.thetaRadius
  encourage nonDegenerateAngle(p.icon, q.icon, r.icon)
}

-- NOTE: Get rid of repetition
Angle a, b
where EqualAngleMarker1(a, b) {
  --find points from p->q, then q->r for each vector. draw vectors for each
  startA = ptOnLine(a.q, a.p, a.radius)
  endA = ptOnLine(a.q, a.r, a.radius)
  sweepA = arcSweepFlag(a.q, startA, endA)

  startB = ptOnLine(b.q, b.p, b.radius)
  endB = ptOnLine(b.q, b.r, b.radius)
  sweepB = arcSweepFlag(b.q, startB, endB)

  override a.mark = Path {
    d : arc("open", startA, endA, (a.radius, a.radius), 0, 0, sweepA)
    strokeWidth : 2.0
    strokeColor : Colors.black
    fillColor: Colors.none
 }
  override b.mark = Path {
    d : arc("open", startB, endB, (b.radius, b.radius), 0, 0, sweepB)
    strokeWidth : 2.0
    strokeColor : Colors.black
    fillColor: Colors.none
 }
}

-- NOTE: Get rid of repetition
Angle a, b
where EqualAngleMarker2(a, b) {
  startA = ptOnLine(a.q, a.p, a.radius)
  endA = ptOnLine(a.q, a.r, a.radius)
  sweepA = arcSweepFlag(a.q, startA, endA)

  startB = ptOnLine(b.q, b.p, b.radius)
  endB = ptOnLine(b.q, b.r, b.radius)
  sweepB = arcSweepFlag(b.q, startB, endB)

  override a.mark = Path {
    d : arc("open", startA, endA, (a.radius, a.radius), 0, 0, sweepA)
    strokeWidth : 2.0
    strokeColor : Colors.black
    fillColor: Colors.none
 }
  override b.mark = Path {
    d : arc("open", startB, endB, (b.radius, b.radius), 0, 0, sweepB)
    strokeWidth : 2.0
    strokeColor : Colors.black
    fillColor: Colors.none
 }

  bigR = const.bigThetaRadius
  startAbig = ptOnLine(a.q, a.p, bigR)
  endAbig = ptOnLine(a.q, a.r, bigR)

  startBbig = ptOnLine(b.q, b.p, bigR)
  endBbig = ptOnLine(b.q, b.r, bigR)

  override a.mark2 = Path {
    d : arc("open", startAbig, endAbig, (bigR, bigR), 0, 0, sweepA)
    strokeWidth : 2.0
    strokeColor : Colors.black
    fillColor: Colors.none
 }
  override b.mark2 = Path {
    d : arc("open", startBbig, endBbig, (bigR, bigR), 0, 0, sweepB)
    strokeWidth : 2.0
    strokeColor : Colors.black
    fillColor: Colors.none
 }
}

-- NOTE: Get rid of repetition
Angle a, b
where EqualAngleMarker3(a, b) {
  startA = ptOnLine(a.q, a.p, a.radius)
  endA = ptOnLine(a.q, a.r, a.radius)
  sweepA = arcSweepFlag(a.q, startA, endA)

  startB = ptOnLine(b.q, b.p, b.radius)
  endB = ptOnLine(b.q, b.r, b.radius)
  sweepB = arcSweepFlag(b.q, startB, endB)

  override a.mark = Path {
    d : arc("open", startA, endA, (a.radius, a.radius), 0, 0, sweepA)
    strokeWidth : 2.0
    strokeColor : Colors.black
    fillColor: Colors.none
 }
  override b.mark = Path {
    d : arc("open", startB, endB, (b.radius, b.radius), 0, 0, sweepB)
    strokeWidth : 2.0
    strokeColor : Colors.black
    fillColor: Colors.none
 }

  midR = const.bigThetaRadius
  startAmid = ptOnLine(a.q, a.p, midR)
  endAmid = ptOnLine(a.q, a.r, midR)

  startBmid = ptOnLine(b.q, b.p, midR)
  endBmid = ptOnLine(b.q, b.r, midR)

  override a.mark2 = Path {
    d : arc("open", startAmid, endAmid, (midR, midR), 0, 0, sweepA)
    strokeWidth : 2.0
    strokeColor : Colors.black
    fillColor: Colors.none
 }
  override b.mark2 = Path {
    d : arc("open", startBmid, endBmid, (midR, midR), 0, 0, sweepB)
    strokeWidth : 2.0
    strokeColor : Colors.black
    fillColor: Colors.none
 }

  bigR = const.bigThetaRadius + 10.
  startAbig = ptOnLine(a.q, a.p, bigR)
  endAbig = ptOnLine(a.q, a.r, bigR)

  startBbig = ptOnLine(b.q, b.p, bigR)
  endBbig = ptOnLine(b.q, b.r, bigR)

  override a.mark3 = Path {
    d : arc("open", startAbig, endAbig, (bigR, bigR), 0, 0, sweepA)
    strokeWidth : 2.0
    strokeColor : Colors.black
    fillColor: Colors.none
 }
  override b.mark3 = Path {
    d : arc("open", startBbig, endBbig, (bigR, bigR), 0, 0, sweepB)
    strokeWidth : 2.0
    strokeColor : Colors.black
    fillColor: Colors.none
 }
}

Angle a, b
where EqualAngle(a, b) {
  -- make sure angle a is equal to angle b
  dotA = dot(normalize(a.p - a.q), normalize(a.r - a.q))
  dotB = dot(normalize(b.p - b.q), normalize(b.r - b.q))
  ensure equal(dotA, dotB)
}

Angle a
where RightUnmarked(a) {
  ensure perpendicular(a.p, a.q, a.r)
}

Angle a
where RightMarked(a) {
  --render half square path of size a.radius
  override a.mark = Path {
    d : pathFromPoints("open", [ptOnLine(a.q, a.p, 20.), innerPointOffset(a.q, a.p, a.r, 20.), ptOnLine(a.q, a.r, 20.)])
    strokeWidth : 2.0
    strokeColor : Colors.black
    fillColor : Colors.none
  }
  ensure perpendicular(a.p, a.q, a.r)
}

-- TODO inRange NaN's
Angle a
where Supplementary(a) {
  ensure inRange(dot(a.p - a.q, a.r - a.q), 0, 1)
}

Triangle t; Plane P 
where t := MkTriangle(p, q, r)
with Point p; Point q; Point r {
  t.PQ above P.icon
  t.QR above P.icon
  t.RP above P.icon
}

Triangle t
where t := MkTriangle(p, q, r)
with Point p; Point q; Point r {
  t.color = Colors.black
  t.PQ = Line {
    start : p.icon.center
    end : q.icon.center
    strokeColor : t.color
    strokeWidth : const.strokeWidth
    style : "solid"
  }
  t.QR = Line {
    start : q.icon.center
    end : r.icon.center
    strokeColor : t.color
    strokeWidth : const.strokeWidth
    style : "solid"
  }
  t.RP = Line {
    start : r.icon.center
    end : p.icon.center
    strokeColor : t.color
    strokeWidth : const.strokeWidth
    style : "solid"
  }
}

Point p
where Incenter(p, T)
with Triangle T {
  s1 = T.PQ.start
  s2 = T.QR.start
  s3 = T.RP.start

  a = vdist(s2, s3)
  b = vdist(s3, s1)
  c = vdist(s1, s2)
  denom =  a + b + c
  vec = vmul(a, s1) + vmul(b, s2) + vmul(c, s3)
  -- override p.vec = (275 / 42, 156 / 42)
  override p.vec = vmul(1/denom, vec)

  semip = (a + b + c) / 2
  clr = setOpacity(Colors.darkpurple, 0.6)
  override T.icon = Circle {
    center : p.vec
    r : sqrt(((semip - a) * (semip - b) * (semip - c))/ semip)
    strokeWidth : const.strokeWidth
    strokeColor : clr
    fillColor : Colors.none
  }
}

Point p
where Circumcenter(p, T)
with Triangle T {
  clr = setOpacity(Colors.darkpurple, 0.6)
  override p.icon = Circle {
    center : p.vec
    r : const.pointSize
    strokeWidth : const.strokeWidth
    strokeColor : clr
    fillColor : clr
  }
  T.icon = Circle {
    center : p.vec
    r : ?
    strokeWidth : const.strokeWidth
    strokeColor : clr
    fillColor : Colors.none
  }
  ensure ptCircleIntersect(T.PQ.start, T.icon)
  ensure ptCircleIntersect(T.QR.start, T.icon)
  ensure ptCircleIntersect(T.RP.start, T.icon)
  encourage repelPt(const.repelWeight, T.PQ.start, T.QR.start)
  encourage repelPt(const.repelWeight, T.QR.start, T.RP.start)
}

Point p
where Centroid(p, T)
with Triangle T {
  clr = setOpacity(Colors.darkpurple, 0.6)
  override p.vec = vmul(1/3, T.PQ.start + T.QR.start + T.RP.start)
  override p.icon = Circle {
    center : p.vec
    r : const.pointSize
    strokeWidth : const.strokeWidth
    strokeColor : clr
    fillColor : clr
  }
  override T.icon = Line {
    start : T.PQ.start
    end : midpoint(T.QR.start, T.QR.end)
    strokeColor : clr
    strokeWidth : const.strokeWidth
    style : "solid"
  }
  override T.line2 = Line {
    start : T.QR.start
    end : midpoint(T.RP.start, T.RP.end)
    strokeColor : clr
    strokeWidth : const.strokeWidth
    style : "solid"
  }
  override T.icon3 = Line {
    start : T.RP.start
    end : midpoint(T.PQ.start, T.PQ.end)
    strokeColor : clr
    strokeWidth : const.strokeWidth
    style : "solid"
  }
}

Point p
where Orthocenter(p, T)
with Triangle T {
  clr = setOpacity(Colors.darkpurple, 0.6)
  T.icon = Line {
    start : (?, ?)
    end : p.vec
    strokeColor : clr
    strokeWidth : const.strokeWidth
    style : "solid"
  }
  T.icon2 = Line {
    start : (?, ?)
    end : p.vec
    strokeColor : clr
    strokeWidth : const.strokeWidth
    style : "solid"
  }
  T.icon3 = Line {
    start : (?, ?)
    end : p.vec
    strokeColor : clr
    strokeWidth : const.strokeWidth
    style : "solid"
  }

  -- TODO make it so that predicates can reference other predicates. 3/4 of these are copy-pasted from the Collinear predicate
  ensure collinear(T.PQ.start, T.icon.start, T.PQ.end)
  ensure collinear(T.QR.start, T.icon2.start, T.QR.end)  
  ensure collinear(T.RP.start, T.icon3.start, T.RP.end)

  ensure perpendicular(T.PQ.start, T.icon.start, p.vec)
  ensure perpendicular(T.QR.start, T.icon2.start, p.vec)  
  ensure perpendicular(T.RP.start, T.icon3.start, p.vec)

  encourage repelPt(const.repelWeight, T.PQ.start, T.icon.start)
  encourage repelPt(const.repelWeight, T.PQ.end, T.icon.start)

  encourage repelPt(const.repelWeight, T.QR.start, T.icon2.start)
  encourage repelPt(const.repelWeight, T.QR.end, T.icon2.start)

  encourage repelPt(const.repelWeight, T.RP.start, T.icon3.start)
  encourage repelPt(const.repelWeight, T.RP.end, T.icon3.start)

}

--Rectangle
-- -- Should the rectangle be constructed from the points, or vice versa?
Rectangle R
where R := MkRectangle(p, q, r, s)
with Point p; Point q; Point r; Point s {
  override R.color = Colors.none
  override R.icon = Path {
      d : pathFromPoints("closed", [p.icon.center, q.icon.center, r.icon.center, s.icon.center])
      strokeWidth : const.strokeWidth
      fillColor : R.color
      strokeColor : Colors.black
    }
  ensure equal(vdist(p.icon.center, q.icon.center), vdist(r.icon.center, s.icon.center))
  ensure equal(vdist(p.icon.center, s.icon.center), vdist(q.icon.center, r.icon.center))

  ensure perpendicular(p.icon.center, q.icon.center, r.icon.center)
  ensure perpendicular(q.icon.center, s.icon.center, r.icon.center)

  -- R.icon above P.icon
}

Quadrilateral Q
where Q := MkQuadrilateral(p, q, r, s)
with Point p; Point q; Point r; Point s {
  Q.p = p.icon.center
  Q.q = q.icon.center
  Q.r = r.icon.center
  Q.s = s.icon.center

  override Q.color = Colors.black
  Q.side1 = Line {
    start : Q.p
    end : Q.q
    strokeColor : Q.color
    strokeWidth : const.strokeWidth
    style : "solid"
  }
  Q.side2 = Line {
    start : Q.r
    end : Q.q
    strokeColor : Q.color
    strokeWidth : const.strokeWidth
    style : "solid"
  }
  Q.side3 = Line {
    start : Q.s
    end : Q.r
    strokeColor : Q.color
    strokeWidth : const.strokeWidth
    style : "solid"
  }
  Q.side4 = Line {
    start : Q.p
    end : Q.s
    strokeColor : Q.color
    strokeWidth : const.strokeWidth
    style : "solid"
  }  
}

--TODO corner case shoves points far off canvas
Quadrilateral Q
where Parallelogram(Q) {
  pq = (Q.q[1]-Q.p[1])/(Q.q[0]-Q.p[0]) * 10000
  rs = (Q.r[1]-Q.s[1])/(Q.r[0]-Q.s[0]) * 10000

  qr = (Q.q[1]-Q.r[1])/(Q.q[0]-Q.r[0]) * 10000
  ps = (Q.s[1]-Q.p[1])/(Q.s[0]-Q.p[0]) * 10000

  -- make opposite sides same length
  ensure equal(vdist(Q.p, Q.q), vdist(Q.r, Q.s))
  ensure equal(vdist(Q.p, Q.s), vdist(Q.q, Q.r))

  -- make opposite sides have parallel
  ensure equal(pq, rs)
  ensure equal(qr, ps)

  -- area must be at least a certain size
  v1 = Q.p - Q.q
  v2 = Q.r - Q.q
  ensure lessThan(10000, (v1[0]*v2[1])-(v1[1]*v2[0])) -- 2D cross product
}

--FUNCTIONS
Segment s
where s := MidSegment(T, p, q)
with Triangle T; Point p; Point q {
  override p.vec = midpoint(T.PQ.start, T.PQ.end)
  override q.vec = midpoint(T.RP.start, T.RP.end)
  override s.icon = Line {
    start : p.icon.center
    end : q.icon.center
    strokeColor : s.color
    strokeWidth : const.strokeWidth
    style : "solid"
  }
}

Point p
where p := MkMidpoint(l)
with Linelike l {
  override p.vec = midpoint(l.icon.start, l.icon.end)
}

Point p
where Midpoint(l, p)
with Linelike l {
  override p.vec = midpoint(l.icon.start, l.icon.end)
}

-- TODO sometimes bisector becomes a scaled version of either side length PQ or QR of angle PQR
Linelike s
where AngleBisector(a, s)
with Angle a; Point p {
  -- first angle = p, q, end
  -- second angle = end, q, r
  dotA = dot(normalize(a.p - a.q), normalize(s.end - a.q)) * 100
  dotB = dot(normalize(s.end - a.q), normalize(a.r - a.q)) * 100
  ensure equal(dotA, dotB)
}

Circle c {
  c.radius = const.circleRadius
  c.vec = (?, ?)

  c.icon = Circle {
    center : c.vec
    r : c.radius
    strokeWidth : const.strokeWidth
    strokeColor : Colors.black
    fillColor : Colors.none
  }
}

Circle c
where c := MkCircleR(p, q)
with Point p, q {
  override c.radius = vdist(p.vec, q.vec)
  override c.vec = p.icon.center
  override c.icon = Circle {
    center : c.vec
    r : c.radius
    strokeWidth : const.strokeWidth
    strokeColor : Colors.black
    fillColor : Colors.none
  }
}

-- TODO this can be reimplemented when issue #621 is resolved
-- Circle c
-- where c := MkCircleD(p, q)
-- with Point p, q {
--   override c.radius = vdist(p.vec, q.vec) / 2
-- }

Segment s
where s := Chord(c, p, q)
with Circle c; Point p, q {
  override s.vec = q.vec - p.vec
  override s.icon = Line {
    start : p.icon.center
    end : q.icon.center
    strokeColor : s.color
    strokeWidth : const.strokeWidth
    style : "solid"
  }

  p.icon above c.icon
  q.icon above c.icon
  ensure ptCircleIntersect(p.vec, c.icon)
  ensure ptCircleIntersect(q.vec, c.icon)
}

Segment s
where s := Radius(c, p)
with Circle c; Point p {
  override s.vec = p.vec - c.vec
  override s.icon = Line {
    start : c.vec
    end : p.icon.center
    strokeColor : Colors.black
    strokeWidth : const.strokeWidth
    style : "solid"
  }
  p.icon above c.icon
  ensure ptCircleIntersect(p.vec, c.icon)
}

Segment s
where s := Diameter(c, p, q)
with Circle c; Point p, q {
  override s.vec = q.vec - p.vec
  override s.icon = Line {
    start : p.icon.center
    end : q.icon.center
    strokeWidth : const.strokeWidth
    style : "solid"
    strokeColor : Colors.black
  }

  p.icon above c.icon
  q.icon above c.icon
  ensure collinear(p.icon.center, c.icon.center, q.icon.center)
  ensure ptCircleIntersect(p.vec, c.icon)
  ensure ptCircleIntersect(q.vec, c.icon)
}

Point p
where OnCircle(c, p)
with Circle c {
  ensure ptCircleIntersect(p.vec, c.icon)
}

Point p
where CircleCenter(c, p)
with Circle c {
  override p.vec = c.vec
}
