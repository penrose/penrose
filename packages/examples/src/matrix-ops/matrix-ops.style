canvas {
    width = 240
    height = 200
}

global {
   scalar scale = 18.0
   string labelSize = "7px"

   shape box = Rectangle {
      center: (0,0)
      width: scale*10
      height: scale*10
      fillColor: #1b1f8a11
      strokeWidth: 2.0
   }

   shape xAxis = Line {
      start: (-scale*5.,0)
      end: (scale*5.,0)
      strokeColor: #888888ff
      strokeWidth: 0.65
      endArrowhead: "straight"
      endArrowheadSize: 0.5
   }

   shape yAxis = Line {
      start: (0,-scale*5.)
      end: (0,scale*5.)
      strokeColor: #888888ff
      strokeWidth: 0.65
      endArrowhead: "straight"
      endArrowheadSize: 0.5
   }

   scalar gridStrokeWidth = 0.35
   color gridStrokeColor = #88888844

   shape gridX1 = Line {
      start: scale*(1.,-5.)
      end: scale*(1.,5.)
      strokeColor: gridStrokeColor
      strokeWidth: gridStrokeWidth
   }
   shape gridX2 = Line {
      start: scale*(2.,-5.)
      end: scale*(2.,5.)
      strokeColor: gridStrokeColor
      strokeWidth: gridStrokeWidth
   }
   shape gridX3 = Line {
      start: scale*(3.,-5.)
      end: scale*(3.,5.)
      strokeColor: gridStrokeColor
      strokeWidth: gridStrokeWidth
   }
   shape gridX4 = Line {
      start: scale*(4.,-5.)
      end: scale*(4.,5.)
      strokeColor: gridStrokeColor
      strokeWidth: gridStrokeWidth
   }
   shape gridXn4 = Line {
      start: scale*(-4.,-5.)
      end: scale*(-4.,5.)
      strokeColor: gridStrokeColor
      strokeWidth: gridStrokeWidth
   }
   shape gridXn3 = Line {
      start: scale*(-3.,-5.)
      end: scale*(-3.,5.)
      strokeColor: gridStrokeColor
      strokeWidth: gridStrokeWidth
   }
   shape gridXn2 = Line {
      start: scale*(-2.,-5.)
      end: scale*(-2.,5.)
      strokeColor: gridStrokeColor
      strokeWidth: gridStrokeWidth
   }
   shape gridXn1 = Line {
      start: scale*(-1.,-5.)
      end: scale*(-1.,5.)
      strokeColor: gridStrokeColor
      strokeWidth: gridStrokeWidth
   }

   shape gridY1 = Line {
      start: scale*(-5.,1.)
      end: scale*(5.,1.)
      strokeColor: gridStrokeColor
      strokeWidth: gridStrokeWidth
   }
   shape gridY2 = Line {
      start: scale*(-5.,2.)
      end: scale*(5.,2.)
      strokeColor: gridStrokeColor
      strokeWidth: gridStrokeWidth
   }
   shape gridY3 = Line {
      start: scale*(-5.,3.)
      end: scale*(5.,3.)
      strokeColor: gridStrokeColor
      strokeWidth: gridStrokeWidth
   }
   shape gridY4 = Line {
      start: scale*(-5.,4.)
      end: scale*(5.,4.)
      strokeColor: gridStrokeColor
      strokeWidth: gridStrokeWidth
   }
   shape gridYn4 = Line {
      start: scale*(-5.,-4.)
      end: scale*(5.,-4.)
      strokeColor: gridStrokeColor
      strokeWidth: gridStrokeWidth
   }
   shape gridYn3 = Line {
      start: scale*(-5.,-3.)
      end: scale*(5.,-3.)
      strokeColor: gridStrokeColor
      strokeWidth: gridStrokeWidth
   }
   shape gridYn2 = Line {
      start: scale*(-5.,-2.)
      end: scale*(5.,-2.)
      strokeColor: gridStrokeColor
      strokeWidth: gridStrokeWidth
   }
   shape gridYn1 = Line {
      start: scale*(-5.,-1.)
      end: scale*(5.,-1.)
      strokeColor: gridStrokeColor
      strokeWidth: gridStrokeWidth
   }
}

forall Matrix M {

   vec2 M.r1 = (1,0)
   vec2 M.r2 = (0,1)

   mat2x2 M.mat = ( M.r1, M.r2 )

   shape M.row1 = Line {
      start: (0,0)
      end: global.scale * M.r1
      strokeColor: #ff0000ff
      strokeWidth: 1.0
      endArrowhead: "straight"
      endArrowheadSize: 0.5
   }

   shape M.row2 = Line {
      start: (0,0)
      end: global.scale * M.r2
      strokeColor: #ff0000ff
      strokeWidth: 1.0
      endArrowhead: "straight"
      endArrowheadSize: 0.5
   }

   shape M.r1Label = Equation {
      center: (global.scale + 7) * M.r1
      string: M.label + "_1"
      fillColor: M.row1.strokeColor
      fontSize: global.labelSize
   }

   shape M.r2Label = Equation {
      center: (global.scale + 7) * M.r2
      string: M.label + "_2"
      fillColor: M.row2.strokeColor
      fontSize: global.labelSize
   }
}

forall Vector v {

   scalar θ = ?
   vec2 v.vec = (cos(θ),sin(θ))

   shape v.icon = Line {
      start: (0,0)
      end: global.scale * v.vec
      strokeColor: #00aa00ff
      strokeWidth: 1.0
      endArrowhead: "straight"
      endArrowheadSize: 0.75
   }

   shape v.labelText = Equation {
      center: (global.scale + 7)*v.vec
      string: v.label
      fillColor: v.icon.strokeColor
      fontSize: global.labelSize
   }
}

forall Matrix A; Vector u; Vector v
where v := times( A, u )
{
   v.vec = A.mat * u.vec

   v.icon.strokeColor = #0000aaff
}

forall Matrix `A` {
   override `A`.r1 = (2,2)
   override `A`.r2 = (-1,1)
}

forall Vector `u` {
   override `u`.vec = (1,0)
}



