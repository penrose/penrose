canvas {
    width = 800
    height = 700
}

const {
  scalar vectorSpaceSize = 350.0
  scalar arrowheadSize = 0.7
  scalar lineThickness = 1.
  scalar arrowThickness = 1.5
  color gray = rgba(0.6, 0.6, 0.6, 1.)
  color lightBlue = rgba(0.2, 0.4, 0.8, 1.0)
  color lightGray = rgba(252, 252, 252, 0.015)
  color green = rgba(0., 0.8, 0., 1.)
  color none = rgba(0., 0., 0., 0.)
}
forall VectorSpace U {
    scalar axisSize = const.vectorSpaceSize / 2.0
    vec2 U.origin = (0., 0.)
    vec2 o = U.origin /* just so we don't need to type U.origin everytime */
    U.axisColor = const.gray

    U.background = Rectangle {
        center : U.origin
        width : const.vectorSpaceSize
        height : const.vectorSpaceSize
        fillColor : const.lightGray
        strokeColor : const.none
    }

    U.xAxis = Line {
        start : (o[0] - axisSize, o[1])
        end : (o[0] + axisSize, o[1])
        strokeWidth : const.lineThickness
        style : "solid"
        strokeColor : U.axisColor
        startArrowhead: true
        endArrowhead: true
        arrowheadSize : const.arrowheadSize * 2.
    }

    U.yAxis = Line {
        start : (o[0], o[1] - axisSize)
        end : (o[0], o[1] + axisSize)
        strokeWidth : const.lineThickness
        style : "solid"
        strokeColor : U.axisColor
        startArrowhead: true
        endArrowhead: true
        arrowheadSize : const.arrowheadSize * 2.
    }

    U.text = Equation {
        string : U.label
        center : (U.origin[0] - axisSize, U.origin[1] + axisSize)
        fillColor : U.axisColor
    }
}


forall Point p; Ellipse e1; Ellipse e2
    {
    rxval = ?
    ryval = ?
    e1.shape = Ellipse{
        strokeWidth: 3
        rx: rxval
        ry: ryval
        center: (?,?)        
    }
    e2.shape = Ellipse{
        strokeWidth: 3
        rx: rxval
        ry: ryval
        center: (0,0)        
    }
    ensure inRange(rxval,10, 500)
    ensure inRange(ryval,10, 500)
    
    p.Point = (?, ?)
    p.shape = Circle{
        center: p.Point
        r: 10
        strokeWidth: 1
    } 
    p.line = Line{
        start: p.Point
        end: closestPoint(p.Point, e1.shape)
        strokeWidth: 1.0
    }
}

forall Vector u; VectorSpace U; Point p; Ellipse e
where In(u,U) {

  u.shape = Line {
    start: p.Point - e.shape.center
    end : U.origin + closestPoint( p.Point,e.shape)-e.shape.center
    strokeWidth : 3.0
    strokeColor : const.lightBlue
    endArrowhead : true
    arrowheadSize : const.arrowheadSize
  }

  u.text = Equation {
    string : u.label
    fillColor : u.shape.strokeColor
  }

  ensure contains(U.background, u.shape)
  ensure contains(U.background, u.text)
  ensure atDist(u.shape, u.text, 15.0)
  ensure minSize(u.shape)

  layer u.text above U.xAxis
  layer u.text above U.yAxis
}
