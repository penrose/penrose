canvas {
    width = 1000
    height = 1000
}

global {
  vec2 corner1 = (?, ?)
  vec2 corner2 = (?, ?)
  vec2 corner3 = (?, ?)

  scalar hue1 = ?
  scalar hue2 = ?
  scalar hue3 = ?

  scalar alphaStep = 0.002
  scalar alphaMin = 0.1
  scalar coef = random(0.3, 0.6)

  triangle = [corner1, corner2, corner3]
  encourage isEquilateral(triangle, true)

  shape icon1 = Circle {
    center: corner1
    r: 3
    fillColor: hsva(hue1, 50, 80, 1)
    strokeColor: #000
    strokeWidth: 2
  }
  shape icon2 = Circle {
    center: corner2
    r: 3
    fillColor: hsva(hue2, 50, 80, 1)
    strokeColor: #000
    strokeWidth: 2
  }
  shape icon3 = Circle {
    center: corner3
    r: 3
    fillColor: hsva(hue3, 50, 80, 1)
    strokeColor: #000
    strokeWidth: 2
  }

  shape icon1b = Circle {
    center: corner1
    r: 8
    fillColor: #ffffffff
    style: "filter: blur(3px)"
  }
  shape icon2b = Circle {
    center: corner2
    r: 8
    fillColor: #ffffffff
    style: "filter: blur(3px)"
  }
  shape icon3b = Circle {
    center: corner3
    r: 8
    fillColor: #ffffffff
    style: "filter: blur(3px)"
  }

  icon1b below icon1
  icon2b below icon2
  icon3b below icon3
}

forall Point p; Point s 
where p := NextPoint(s) {  
  scalar r = random(0, 3)
  scalar coef1 = max(0, min(1, 1 - floor(r)))
  scalar coef2 = max(0, min(1, 1 - floor(r - 1))) - max(0, min(1, 1 - floor(r)))
  scalar coef3 = 1 - max(0, min(1, 1 - floor(r - 1)))

  vec2 corner = coef1 * global.corner1 + coef2 * global.corner2 + coef3 * global.corner3
  vec2 p.pos = global.coef * s.pos + (1 - global.coef) * corner


  scalar p.alpha = max(global.alphaMin, s.alpha - global.alphaStep)
  

  scalar hue = coef1 * global.hue1 + coef2 * global.hue2 + coef3 * global.hue3
  scalar p.hue = 0.3 * s.hue + 0.7 * hue

  shape p.line = Line {
    start: s.pos
    end: p.pos
    strokeColor: hsva(p.hue, 50, 80, p.alpha)
    style: "filter: blur(1px)"
    ensureOnCanvas: false
  }

  p.line below global.icon1b
  p.line below global.icon2b
  p.line below global.icon3b
}

forall Seed s {
  vec2 s.pos = (?, ?)
  scalar s.hue = ?
  scaler s.alpha = 0.5
}

forall Point p {
  shape p.blur = Circle {
    center: p.pos
    r: 4
    fillColor: hsva(p.hue, 50, 80, 1)
    style: "filter: blur(2px)"
    ensureOnCanvas: false
  }
  shape p.icon = Circle {
    center: p.pos
    r: 3
    fillColor: #000
    ensureOnCanvas: false
  } 

  p.blur below global.icon1b
  p.blur below global.icon2b
  p.blur below global.icon3b

  p.icon below global.icon1b
  p.icon below global.icon2b
  p.icon below global.icon3b
}
