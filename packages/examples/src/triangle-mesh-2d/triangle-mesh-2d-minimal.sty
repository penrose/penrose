canvas {
   width = 360
   height = 270
}

Colors {
   color black = rgba(0.,0.,0.,1.)
   color red = rgba(1.,0.,0.,1.)
   color green = rgba(0.,.7,0.,1.)
   color blue = rgba(0.,0,1.,1.)
   color white = rgba(1.,1.,1.,1.)
   color lightGray = rgba(.8,.8,.8,1.)
   color clear = rgba(0.,0.,0.,0.)
   color semiBlue = rgba( 27./255., 31./255., 138./255., .2 )
}

Global {
   scalar vertexRadius = 4.
   scalar pointRadius = 2.

   shape box = Rectangle {
      center: (0.,0.)
      color: Colors.clear
      strokeColor: Colors.lightGray
      strokeWidth: 2.
      w: canvas.width
      h: canvas.height
   }
}

forall Vertex v {

   vec2 v.center = (?,?)

   -- black dot
   shape v.icon = Square {
      color: Colors.black
      side: Global.vertexRadius
      center: v.center
   }

   -- make sure the dot is on the canvas
   ensure contains( Global.box, v.icon )
}

forall Triangle t; Vertex i; Vertex j; Vertex k
where t := MakeTriangle(i,j,k)
{
   vec2 a = i.icon.center
   vec2 b = j.icon.center
   vec2 c = k.icon.center

   -- Polygon is currently broken, so we draw the
   -- triangle as a Path instead.
   shape t.icon = Path {
      pathData: pathFromPoints("closed", [a,b,c])
      fill: rgba( 1., .7, 0., .2 )
      color: none()
   }

   -- Make sure triangles are positively
   -- oriented and not tiny, by making their
   -- signed area greater than some fixed constant.
   scalar signedArea = cross2D( b-a, c-a )
   encourage lessThan( 2000., signedArea )

   -- Make sure we don't get a skinny triangle by
   -- keeping two of the angles in a reasonable range
   -- (the third will of course make the sum equal to pi...)
   scalar aTheta = angleFrom( b-a, c-a )
   scalar bTheta = angleFrom( c-b, a-b )
   ensure inRange( aTheta, toRadians(30.), toRadians(80.) )
   ensure inRange( bTheta, toRadians(20.), toRadians(90.) )
}

-- Draw all points as stroked dots
forall Point p {

   vec2 p.center = (?,?)

   -- white dot
   shape p.icon = Circle {
      color: Colors.white
      strokeColor: Colors.black
      r: Global.pointRadius
      center: p.center
      strokeWidth: 1.
   }

   -- make sure the dot and label are both
   -- on the canvas
   ensure contains( Global.box, p.icon )
}

-- Draw all points above all triangles
forall Point p; Triangle t {
   layer p.icon above t.icon
}

-- Circumcenter
forall Point p; Triangle t; Vertex i; Vertex j; Vertex k
where t := MakeTriangle(i,j,k); p := Circumcenter(t) {

   -- put point at circumcenter 
   vec2 x = circumcenter( i.center, j.center, k.center )
   override p.center = x
   override p.icon.color = Colors.green
}

-- Incenter
forall Point p; Triangle t; Vertex i; Vertex j; Vertex k
where t := MakeTriangle(i,j,k); p := Incenter(t) {

   -- put point at incenter 
   vec2 p.inCenter = incenter( i.center, j.center, k.center )
   override p.center = p.inCenter
   override p.icon.color = Colors.blue
}

