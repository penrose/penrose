canvas {
  width = 700
  height = 700
}

colors {
  contour = #00000093
}

global {
    scalar colorOffset = random(0, 100)
    shape background = Rectangle {
        center: (0, 0)
        width: canvas.width
        height: canvas.height
        fillColor: hsva(colorOffset, 10, 100, 1)
        ensureOnCanvas: false
    } 
}

layout = [shapes, arrows, inbox]

forall Node n {
    vec2 n.center = (? in shapes, ? in shapes)
    scalar n.normsq = normsq(n.center)
    shape n.icon = Circle {
        center: n.center
        r: 35
        fillColor: #ffffffff
        strokeColor: colors.contour
        strokeWidth: 2.6 - 0.008 * norm(n.center)
        ensureOnCanvas: false
    }
    shape n.text = Text {
        string: n.label
        strokeColor: #000000ff
        center: n.center
        fontSize: "20px"
    }
}

forall Node n
where Leader(n) {
    override n.icon.fillColor = #00ff00ff
}

forall Node n1; Node n2 {
    ensure disjoint(n1.icon, n2.icon, 50) in shapes
}

forall Edge e; Node a; Node b
where e := MakeEdge(a, b) {
    scalar e.distsq = vdistsq(a.center, b.center)
    shape e.icon = Line {
        start: (? in arrows, ? in arrows)
        end: (? in arrows, ? in arrows)
        strokeColor: colors.contour
        ensureOnCanvas: false
        endArrowhead: "straight"
    }

    ensure signedDistance(a.icon, e.icon.start) == 5 in arrows
    ensure signedDistance(b.icon, e.icon.end) == 5 in arrows

    encourage 1000 * length(e.icon) == 0 in arrows
}


collect Node n into nodes {
    normsqs = listof normsq from nodes
    centers = listof center from nodes
    scalar scale = (canvas.width / 5) * (canvas.height / 5)
    ensure sum(normsqs) / count(normsqs) == scale in shapes
    ensure norm(sumVectors(centers)) == 0 in shapes
}

collect Edge e into edges
where e := MakeEdge(a, b)
foreach Node a; Node b {
    distsqs = listof distsq from edges
    encourage sum(distsqs) == 0 in shapes
}

forall InboxNode i
where i := MakeInboxNode(n1, n2)
with Node n1; Node n2 {
    i.center = (? in inbox, ? in inbox)
    i.icon = Circle {
        center: i.center
        r: 10
        fillColor: none()
        strokeColor: none()
        strokeWidth: 1
    }
    i.text = Text {
        string: n2.label
        fillColor: #000000ff
        center: i.center
    }

    ensure shapeDistance(n1.icon, i.icon) == 5 in inbox
}

forall InboxNode i
where i := MakeInboxNode(n, n)
with Node n {
    i.center = (? in inbox, ? in inbox)
    i.icon = Circle {
        center: i.center
        r: 10
        fillColor: none()
        strokeColor: none()
        strokeWidth: 1
    }
    i.text = Text {
        string: n.label
        fillColor: #000000ff
        center: i.center
    }

    ensure shapeDistance(n.icon, i.icon) == 0 in inbox
}

forall InboxNode i1; InboxNode i2 {
    ensure disjoint(i1.icon, i2.icon) in inbox
}
forall InboxNode i; Edge e {
    ensure shapeDistanceCircleLine(i.icon.center, i.icon.r, e.icon.start, e.icon.end) > 5 in inbox
}