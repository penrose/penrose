----------------------------------------
-- Global parameters -------------------
----------------------------------------

canvas {
   width: 240
   height: 200
}

colors {
   color black = #000000
   color blue = #1b1f8a33
}

global {
   scalar lineWidth = 1.0
   scalar overlapPadding = 5.0
}

----------------------------------------
-- Rules for drawing shapes ------------
----------------------------------------

forall Point p {
   -- location
   vec2 p.x = (?,?)

   -- draw as a small dot
   shape p.icon = Circle {
      center: p.x
      r: 5.0
      fillColor: colors.black
   }
}

forall Interval I {
   -- location of endpoints
   scalar h = ?
   vec2 I.x0 = (?,h)
   vec2 I.x1 = (?,h)

   -- draw as a horizontal line segment
   shape I.icon = Line {
      start: I.x0
      end: I.x1
      strokeWidth: global.lineWidth
      strokeColor: colors.black
   }
}

forall Circle C {
   -- center and radius
   vec2 C.center = (?,?)
   scalar C.r = ?

   -- draw as an empty circle
   shape C.icon = Circle {
      center: C.center
      r: C.r
      fillColor: none()
      strokeWidth: global.lineWidth
      strokeColor: colors.black
   }
}

forall Disk D {
   -- center and radius
   vec2 D.center = (?,?)
   scalar D.r = ?

   -- draw as a filled circle
   shape D.icon = Circle {
      center: D.center
      r: D.r
      fillColor: colors.blue
   }
}

forall Triangle T {
   -- vertices
   vec2 T.p0 = (?,?)
   vec2 T.p1 = (?,?)
   vec2 T.p2 = (?,?)

   -- draw as a filled polygon
   shape T.icon = Polygon {
      points: [T.p0, T.p1, T.p2]
      fillColor: colors.blue
   }
}

forall Sphere S {
   -- center and radius
   vec2 center = (?,?)
   scalar r = ?

   -- draw as a filled and outlined circle
   shape S.icon = Circle {
      center: S.center
      r: S.r
      fillColor: colors.blue
      strokeWidth: global.lineWidth
      strokeColor: colors.black
   }

   -- draw an equator
   shape equator = Path {
      points: arcTo( [S.r,S.r/4], [-1,0], [0,0,0] )
      strokeWidth: global.lineWidth/2
      strokeColor: colors.blue
   }

   -- draw a shadow
   shape shadow = Ellipse {
      center: S.center - (0,1.5*S.r)
      rx: S.r
      ry: S.r/3
      fillColor: rgba(0,0,0,.1)
   }
}

-- draw points above shapes
forall Point p; Shape S {
   layer S.icon above S.icon
}

-- ensure that no two shapes overlap
forall Shape S1; Shape S2 {
   ensure disjoint( S1.icon, S2.icon, global.overlapPadding )
}

----------------------------------------
-- Rules for sampling shapes -----------
----------------------------------------

forall Point p; Interval I
where p := sampleInterval( I ) {
   scalar t = unitRandom()
   override p.x = (1-t)*I.x0 + t*I.x1
}

forall Point p; Circle C
where p := sampleCircle( C ) {
   vec2 y = sampleCircle()
   override p.x = C.r*y + C.center
}

forall Point p; Disk D
where p := sampleDisk( D ) {
   vec2 y = sampleDisk()
   override p.x = D.r*y + D.center
}

forall Point p; Triangle T
where p := sampleTriangle( T ) {
   vec2 y = sampleTriangle()
   override p.x = y
}

forall Point p; Sphere S
where p := sampleSphere( S ) {
   vec2 y = sampleSphere()
   override p.x = S.r*y + S.center
}

