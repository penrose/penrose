canvas {
  width = 800
  height = 700
}

-- Frame

forall Frame f {
    f.ground = -200.0
    f.foreground = Rectangle {
        strokeWidth : 0.0
        center: (0.0, 0.5 * (f.ground - 300.0))
        width: 600.0
        height: f.ground + 300.0
        fillColor : rgba(0.0, 0.0, 0.0, 1.0)
    }
    f.background = Rectangle {
        strokeWidth : 0.0
        center: (0.0, 0.0)
        width: 600.0
        height: 600.0
        fillColor : rgba(0.05, 0.05, 0.25, 1.0)
    }
    f.foreground above f.background
}

forall Frame f; Moon m { 
    m.icon above f.background 
    ensure contains(f.background, m.icon)
    ensure disjoint(f.foreground, m.icon)
}

forall Frame f; Branch b { 
    b.icon above f.foreground
    ensure contains(f.background, b.icon)
    ensure disjoint(f.foreground, b.icon)
}

-- Moon

forall Moon m {
    m.icon = Circle {
        strokeWidth : 0.0
        fillColor : rgba(0.2, 0.2, 0.3, 1.0)
    }
    ensure lessThan(30.0, m.icon.r)
    ensure lessThan(m.icon.r, 50.0)
}

forall Crater c {
    c.icon = Circle {
        strokeWidth : 0.0
        fillColor : rgba(0.3, 0.3, 0.4, 1.0)
    }
    ensure lessThan(5.0, c.icon.r)
}

forall Crater c1; Crater c2 {
    ensure disjoint(c1.icon, c2.icon, 5.0)
}

forall Moon m; Crater c
where HasCrater(m, c) {
    c.icon above m.icon
    ensure contains(m.icon, c.icon, 5.0)
}

-- Stars

forall Star s {
    s.icon = Circle {
        strokeWidth : 0.0
        fillColor : rgba(0.9, 0.8, 0.0, 1.0)
    }
    ensure lessThan(3.0, s.icon.r)
    ensure lessThan(s.icon.r, 10.0)
}

forall Moon m; Star s {
    ensure disjoint(m.icon, s.icon)
}

forall Star s1; Star s2 {
    ensure disjoint(s1.icon, s2.icon)
}

forall Branch b; Star s {
    ensure disjoint(b.icon, s.icon, 10.0)
}

forall Frame f; Star s {
    s.icon above f.background
    ensure contains(f.background, s.icon)
    ensure disjoint(f.foreground, s.icon, 10.0)
}

-- Tree

forall Branch b {
    b.baseX = ? -- -20.0
    b.baseY = -200.0
    b.base = ( b.baseX, b.baseY )
    b.baseLength = 150.0
    b.baseAngle = 0.0
    b.scalingFactorL = 0.7
    b.scalingFactorR = 0.6
    b.angleL = ?
    b.angleR = ?
    b.tipX = b.baseX + sin(b.baseAngle) * b.baseLength
    b.tipY = b.baseY + cos(b.baseAngle) * b.baseLength
    b.strokeWidth = 8.0

    b.icon = Line {
      start: (b.baseX, b.baseY)
      end: (b.tipX, b.tipY)
      strokeColor: rgba(0.0, 0.0, 0.0, 1.0)
      strokeWidth: b.strokeWidth
      strokeLinecap: "round"
    }

    ensure lessThanSq(-1.0, b.angleL)
    ensure lessThanSq(-1.0, b.angleR)
    ensure lessThanSq(b.angleL, 1.0)
    ensure lessThanSq(b.angleR, 1.0)
}

forall Branch b; Moon m {
    ensure disjoint(b.icon, m.icon, 20.0)
}

forall Branch left; Branch right; Branch base
where AreSubbranches(left, right, base) {

    override left.baseX = base.tipX
    override left.baseY = base.tipY
    override left.baseLength = base.scalingFactorL * base.baseLength
    override left.baseAngle = base.baseAngle + base.angleL
    override left.strokeWidth = 0.5 * base.strokeWidth
    override left.scalingFactorL = base.scalingFactorL
    override left.scalingFactorR = base.scalingFactorR
    override left.angleL = base.angleL
    override left.angleR = base.angleR
    override left.tipX = left.baseX + sin(left.baseAngle) * left.baseLength
    override left.tipY = left.baseY + cos(left.baseAngle) * left.baseLength

    override left.icon = Line {
      start: (left.baseX, left.baseY)
      end: (left.tipX, left.tipY)
      strokeColor: rgba(0.0, 0.0, 0.0, 1.0)
      strokeWidth: left.strokeWidth
      strokeLinecap: "round"
    }

    override right.baseX = base.tipX
    override right.baseY = base.tipY
    override right.baseLength = base.scalingFactorR * base.baseLength
    override right.baseAngle = base.baseAngle + base.angleR
    override right.strokeWidth = 0.5 * base.strokeWidth
    override right.scalingFactorL = base.scalingFactorL
    override right.scalingFactorR = base.scalingFactorR
    override right.angleL = base.angleL
    override right.angleR = base.angleR
    override right.tipX = right.baseX + sin(right.baseAngle) * right.baseLength
    override right.tipY = right.baseY + cos(right.baseAngle) * right.baseLength

    override right.icon = Line {
      start: (right.baseX, right.baseY)
      end: (right.tipX, right.tipY)
      strokeColor: rgba(0.0, 0.0, 0.0, 1.0)
      strokeWidth: right.strokeWidth
      strokeLinecap: "round"
    }

}
