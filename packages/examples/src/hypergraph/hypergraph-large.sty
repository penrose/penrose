
canvas {
  width = 800
  height = 700
}

forall Graph g {
  -- x-coordinates
  g.xl = ?
  g.x1 = ?
  g.x2 = ?
  g.x3 = ?
  g.xr = ?
  -- y-coordinates
  g.yb = ?
  g.yt = ?
  -- background
  -- g.rect = Rectangle{
  --   width: g.xr - g.xl
  --   height: g.yt - g.yb
  --   center: [ 0.5 * (g.xl + g.xr), 0.5 * (g.yb + g.yt) ]
  -- }
  -- minimize size
  encourage equal(g.xl, g.xr)
  encourage equal(g.yb, g.yt)

  ensure lessThan(100, g.x1 - g.xl)
  ensure lessThan(100, g.x2 - g.x1)
  ensure lessThan(100, g.x3 - g.x2)
  ensure lessThan(100, g.xr - g.x3)

  encourage equal(g.xl + g.xr, 0)
  encourage equal(g.yb + g.yt, 0)
}

forall Node n {
  -- style
  n.r = 5
  n.w = 3
  -- n.c = rgba(0.1, 0.4, 0.5, 1.0)
  -- x-coordinates
  n.xl = ?
  n.x1 = ?
  n.x2 = ?
  n.x3 = ?
  n.xr = ?
  -- y-coordinates
  n.y = ?
  n.y1 = ?
  n.y2 = ?
  n.y3 = ?
  -- dots
  n.dotl = Circle{ 
    r: n.r
    center: [n.xl, n.y]
    -- fillColor: n.c
  }

  n.dotlP = Circle{ 
    r: n.r
    center: [n.xl, n.y]
    fillColor: n.dotl.fillColor
  }

  n.dot1 = Circle{ 
    r: n.r
    center: [n.x1, n.y1]
    fillColor: n.dotl.fillColor -- n.c
  }
  n.dot1P = Circle{ 
    r: n.r
    center: [n.x1, n.y1]
    fillColor: n.dotl.fillColor
  }

  n.dot2 = Circle{ 
    r: n.r
    center: [n.x2, n.y2]
    fillColor: n.dotl.fillColor -- n.c
  }
  n.dot2P = Circle{ 
    r: n.r
    center: [n.x2, n.y2]
    fillColor: n.dotl.fillColor -- n.c
  }

  n.dot3 = Circle{ 
    r: n.r
    center: [n.x3, n.y3]
    fillColor: n.dotl.fillColor -- n.c
  }
  n.dot3P = Circle{ 
    r: n.r
    center: [n.x3, n.y3]
    fillColor: n.dotl.fillColor -- n.c
  }

  n.dotr = Circle{ 
    r: n.r
    center: [n.xr, n.y]
    fillColor: n.dotl.fillColor -- n.c
  }
  n.dotrP = Circle{ 
    r: n.r
    center: [n.xr, n.y]
    fillColor: n.dotl.fillColor -- n.c
  }

  -- lines
  n.linel1 = Line{ 
    strokeWidth: n.w
    start: n.dotl.center
    end: n.dot1.center
    -- fillColor: n.dotl.fillColor -- n.c
    strokeColor: n.dotl.fillColor -- n.c
  }
  n.line12 = Line{ 
    strokeWidth: n.w
    start: n.dot1.center
    end: n.dot2.center
    -- fillColor: n.dotl.fillColor -- n.c
    strokeColor: n.dotl.fillColor -- n.c
  }
  n.line23 = Line{ 
    strokeWidth: n.w
    start: n.dot2.center
    end: n.dot3.center
    -- fillColor: n.dotl.fillColor -- n.c
    strokeColor: n.dotl.fillColor -- n.c
  }
  n.line3r = Line{
    strokeWidth: n.w
    start: n.dot3.center
    end: n.dotr.center
    -- fillColor: n.dotl.fillColor -- n.c
    strokeColor: n.dotl.fillColor -- n.c
  }
  encourage equal(abs(n.y1 - n.y), 50)
  encourage equal(abs(n.y1 - n.y2), 50)
  encourage equal(abs(n.y3 - n.y2), 50)
  encourage equal(abs(n.y3 - n.y), 50)
}

forall Layer1 l {
  -- coordinates
  l.x = ?
  l.yb = ?
  l.yt = ?
  -- line
  l.line = Line{ 
    strokeWidth: 0--30
    start: [l.x, l.yb - 20]
    end: [l.x, l.yt + 20]
    strokeColor: rgba(0.0, 0.0, 0.0, 0.1)
  }
}

forall Layer2 l {
  -- coordinates
  l.x = ?
  l.yb = ?
  l.yt = ?
  -- line
  l.line = Line{ 
    strokeWidth: 0--30
    start: [l.x, l.yb - 20]
    end: [l.x, l.yt + 20]
    strokeColor: rgba(0.0, 0.0, 0.0, 0.1)
  }
}

forall Layer3 l {
  -- coordinates
  l.x = ?
  l.yb = ?
  l.yt = ?
  -- line
  l.line = Line{ 
    strokeWidth: 0--30
    start: [l.x, l.yb - 20]
    end: [l.x, l.yt + 20]
    strokeColor: rgba(0.0, 0.0, 0.0, 0.1)
  }
}

Graph g; Layer1 l
where GraphHasLayer1(g, l) {
  -- ensure equal(l.x, g.x1)
  -- ensure equal(l.yb, g.yb)
  -- ensure equal(l.yt, g.yt)

  override l.x = g.x1
  override l.yb = g.yb
  override l.yt = g.yt
}

Graph g; Layer2 l
where GraphHasLayer2(g, l) {
  -- ensure equal(l.x, g.x2)
  -- ensure equal(l.yb, g.yb)
  -- ensure equal(l.yt, g.yt)

  override l.x = g.x2
  override l.yb = g.yb
  override l.yt = g.yt
}

Graph g; Layer3 l
where GraphHasLayer3(g, l) {
  -- ensure equal(l.x, g.x3)
  -- ensure equal(l.yb, g.yb)
  -- ensure equal(l.yt, g.yt)

  override l.x = g.x3
  override l.yb = g.yb
  override l.yt = g.yt
}

Graph g; Node n
where GraphHasNode(g, n) {
  -- ensure equal(g.xl, n.xl)
  -- ensure equal(g.x1, n.x1)
  -- ensure equal(g.x2, n.x2)
  -- ensure equal(g.x3, n.x3)
  -- ensure equal(g.xr, n.xr)

  override n.xl = g.xl
  override n.x1 = g.x1
  override n.x2 = g.x2
  override n.x3 = g.x3
  override n.xr = g.xr

  ensure lessThan(g.yb, n.y)
  ensure lessThan(n.y, g.yt)
}

forall Node n1; Node n2 {
  -- ensure lessThan(50.0, abs(n2.y - n1.y))
  -- ensure lessThan(50.0, abs(n2.y1 - n1.y1))
  -- ensure lessThan(50.0, abs(n2.y2 - n1.y2))
  -- ensure lessThan(50.0, abs(n2.y3 - n1.y3))

  encourage lessThan(50.0, abs(n2.y - n1.y))
  encourage lessThan(50.0, abs(n2.y1 - n1.y1))
  encourage lessThan(50.0, abs(n2.y2 - n1.y2))
  encourage lessThan(50.0, abs(n2.y3 - n1.y3))
}

forall Edge e {
  e.x = ?
  e.yt = ?
  e.yb = ?
  e.rectx = ?
  e.rect = Rectangle {
    center: [e.rectx, 0.5 * (e.yt + e.yb)]
    width: 20.0
    height: e.yt - e.yb
    fillColor: rgba(1.0, 1.0, 1.0, 0.0)
  }
  e.ellipse = Ellipse {
    center: [e.rectx, 0.5 * (e.yt + e.yb)]
    rx: 10.0
    ry: 0.5 * (e.yt - e.yb)
    fillColor: rgba(0.0, 0.0, 0.0, 0.2)
  }
  encourage equal(e.yt, e.yb)
  ensure equal(e.rectx, e.x)
}

Layer1 l; Edge e
where Layer1HasEdge(l, e) {
  -- ensure equal(l.x, e.x)
  override e.x = l.x
  ensure lessThan(l.yb, e.yb)
  ensure lessThan(e.yt, l.yt)
}

Layer2 l; Edge e
where Layer2HasEdge(l, e) {
  -- ensure equal(l.x, e.x)
  override e.x = l.x
  ensure lessThan(l.yb, e.yb)
  ensure lessThan(e.yt, l.yt)
}

Layer3 l; Edge e
where Layer3HasEdge(l, e) {
  -- ensure equal(l.x, e.x)
  override e.x = l.x
  ensure lessThan(l.yb, e.yb)
  ensure lessThan(e.yt, l.yt)
}

Edge e; Node n
where EdgeHasNodeInLayer1(e, n) {
  -- ensure lessThan(e.yb, n.y1)
  -- ensure lessThan(n.y1, e.yt)
  ensure contains(e.rect, n.dot1, 4)
}

Edge e; Node n
where EdgeHasNodeInLayer2(e, n) {
  -- ensure lessThan(e.yb, n.y2)
  -- ensure lessThan(n.y2, e.yt)
  ensure contains(e.rect, n.dot2, 4)
}

Edge e; Node n
where EdgeHasNodeInLayer3(e, n) {
  -- ensure lessThan(e.yb, n.y3)
  -- ensure lessThan(n.y3, e.yt)
  ensure contains(e.rect, n.dot3, 4)
}

forall Edge e1; Edge e2 {
  ensure disjoint(e1.rect, e2.rect, 20)
  encourage lessThan(abs(e1.yt - e1.yb) +abs(e2.yt - e2.yb), abs(e1.yt + e1.yb -e2.yt - e2.yb))
}
