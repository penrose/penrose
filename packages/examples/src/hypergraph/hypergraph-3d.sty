
canvas {
  width = 800
  height = 700
}

forall Graph g {
  g.xl = ?
  g.x1 = ?
  g.x2 = ?
  g.x3 = ?
  g.xr = ?
  g.yb = ?
  g.yt = ?
  g.infty = (?, ?)
  encourage equal(g.xl, g.xr)
  encourage equal(g.yb, g.yt)
  ensure lessThan(100, g.x1 - g.xl)
  ensure lessThan(100, g.x2 - g.x1)
  ensure lessThan(100, g.x3 - g.x2)
  ensure lessThan(100, g.xr - g.x3)
  encourage equal(g.xl + g.xr, 0)
  encourage equal(g.yb + g.yt, 0)
  ensure lessThan(g.infty[0], -700)
  ensure lessThan(g.infty[1], 700)
  ensure lessThan(-1000, g.infty[0])
  ensure lessThan(500, g.infty[1])
}

forall Node n {
  n.r = 5
  n.w = 3
  n.xl = ?
  n.x1 = ?
  n.x2 = ?
  n.x3 = ?
  n.xr = ?
  n.yl = ?
  n.y1 = ?
  n.y2 = ?
  n.y3 = ?
  n.yr = ?
  n.dotl = Circle{ 
    r: n.r
    center: [n.xl, n.yl]
  }
  n.dotlP = Circle{ 
    r: n.r
    center: [n.xl, n.yl]
    fillColor: n.dotl.fillColor
  }
  n.dot1 = Circle{ 
    r: n.r
    center: [n.x1, n.y1]
    fillColor: n.dotl.fillColor
  }
  n.dot1P = Circle{ 
    r: n.r
    center: [n.x1, n.y1]
    fillColor: n.dotl.fillColor
  }
  n.dot2 = Circle{ 
    r: n.r
    center: [n.x2, n.y2]
    fillColor: n.dotl.fillColor
  }
  n.dot2P = Circle{ 
    r: n.r
    center: [n.x2, n.y2]
    fillColor: n.dotl.fillColor
  }
  n.dot3 = Circle{ 
    r: n.r
    center: [n.x3, n.y3]
    fillColor: n.dotl.fillColor
  }
  n.dot3P = Circle{ 
    r: n.r
    center: [n.x3, n.y3]
    fillColor: n.dotl.fillColor
  }
  n.dotr = Circle{ 
    r: n.r
    center: [n.xr, n.yr]
    fillColor: n.dotl.fillColor
  }
  n.dotrP = Circle{ 
    r: n.r
    center: [n.xr, n.yr]
    fillColor: n.dotl.fillColor
  }
  n.linel1 = Path{
    d: makePath((n.xl, n.yl), (n.x1, n.y1) , 20, 0)
    strokeWidth: n.w
    strokeColor: n.dotl.fillColor
  }
  n.line12 = Path{ 
    d: makePath((n.x1, n.y1), (n.x2, n.y2) , 20, 0)
    strokeWidth: n.w
    strokeColor: n.dotl.fillColor
  }
  n.line23 = Path{ 
    d: makePath((n.x2, n.y2), (n.x3, n.y3) , 20, 0)
    strokeWidth: n.w
    strokeColor: n.dotl.fillColor
  }
  n.line3r = Path{
    d: makePath((n.x3, n.y3), (n.xr, n.yr) , 20, 0)
    strokeWidth: n.w
    strokeColor: n.dotl.fillColor
  }
  encourage equal(abs(n.y1 - n.yl), -100)
  encourage equal(abs(n.y1 - n.y2), -100)
  encourage equal(abs(n.y3 - n.y2), -100)
  encourage equal(abs(n.y3 - n.yr), -100)
}

forall Layer l {
  l.x = ?
  l.yb = ?
  l.yt = ?
  l.infty = (?, ?)

  l.r1 = (l.x - 20.0, (l.x - 20.0 - l.infty[0]) * (l.yb - 50.0 - l.infty[1]) / (l.x + 20.0 - l.infty[0]) + l.infty[1] )
  l.r2 = (l.x + 20.0, l.yb - 50.0)
  l.r3 = (l.x + 20.0, (l.x + 20.0 - l.infty[0]) * (l.yt + 50.0 - l.infty[1]) / (l.x - 20.0 - l.infty[0]) + l.infty[1] )
  l.r4 = (l.x - 20.0, l.yt + 50.0)

  l.rect = Polygon {
    points: [ l.r1, l.r2, l.r3, l.r4 ]
  }

}

Graph g; Layer1 l
where GraphHasLayer1(g, l) {
  override l.x = g.x1
  override l.yb = g.yb
  override l.yt = g.yt
  override l.infty = g.infty
}

Graph g; Layer2 l
where GraphHasLayer2(g, l) {
  override l.x = g.x2
  override l.yb = g.yb
  override l.yt = g.yt
  override l.infty = g.infty
}

Graph g; Layer3 l
where GraphHasLayer3(g, l) {
  override l.x = g.x3
  override l.yb = g.yb
  override l.yt = g.yt
  override l.infty = g.infty
}

Graph g; Node n
where GraphHasNode(g, n) {
  override n.xl = g.xl
  override n.x1 = g.x1
  override n.x2 = g.x2
  override n.x3 = g.x3
  override n.xr = g.xr
  ensure lessThan(g.yb, n.yr)
  ensure lessThan(n.yr, g.yt)
  ensure lessThan(g.yb, n.yl)
  ensure lessThan(n.yl, g.yt)
}

forall Node n1; Node n2 {
  encourage lessThan(50.0, abs(n2.yl - n1.yl))
  encourage lessThan(50.0, abs(n2.y1 - n1.y1))
  encourage lessThan(50.0, abs(n2.y2 - n1.y2))
  encourage lessThan(50.0, abs(n2.y3 - n1.y3))
  encourage lessThan(50.0, abs(n2.yr - n1.yr))
}

forall Edge e {
  e.x = ?
  e.yt = ?
  e.yb = ?
  e.rectx = ?
  e.rect = Rectangle {
    center: [e.rectx, 0.5 * (e.yt + e.yb)]
    width: 20.0
    height: e.yt - e.yb
    fillColor: rgba(1.0, 1.0, 1.0, 0.0)
  }
  e.ellipse = Ellipse {
    center: [e.rectx, 0.5 * (e.yt + e.yb)]
    rx: 10.0
    ry: 0.5 * (e.yt - e.yb)
    fillColor: rgba(0.0, 0.0, 0.0, 0.2)
  }
  encourage equal(e.yt, e.yb)
  ensure equal(e.rectx, e.x)
}

forall Layer1 l; Edge e
where Layer1HasEdge(l, e) {
  override e.x = l.x
  ensure lessThan(l.yb, e.yb)
  ensure lessThan(e.yt, l.yt)
}

forall Layer2 l; Edge e
where Layer2HasEdge(l, e) {
  override e.x = l.x
  ensure lessThan(l.yb, e.yb)
  ensure lessThan(e.yt, l.yt)
}

forall Layer3 l; Edge e
where Layer3HasEdge(l, e) {
  override e.x = l.x
  ensure lessThan(l.yb, e.yb)
  ensure lessThan(e.yt, l.yt)
}

forall Edge e; Node n
where EdgeHasNodeInLayer1(e, n) {
  ensure contains(e.rect, n.dot1, 4)
}

forall Edge e; Node n
where EdgeHasNodeInLayer2(e, n) {
  ensure contains(e.rect, n.dot2, 4)
}

forall Edge e; Node n
where EdgeHasNodeInLayer3(e, n) {
  ensure contains(e.rect, n.dot3, 4)
}

forall Edge e1; Edge e2 {
  ensure disjoint(e1.rect, e2.rect, 20)
  encourage lessThan(abs(e1.yt - e1.yb) + abs(e2.yt - e2.yb), abs(e1.yt + e1.yb - e2.yt - e2.yb))
}
