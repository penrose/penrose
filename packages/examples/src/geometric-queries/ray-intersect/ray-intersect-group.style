canvas {
   width = 800
   height = 700
}

-- Rules for drawing each type of shape

forall Ray r {
   scalar theta = random( 4, 5.42 )
   vec2 r.pos = (0,canvas.height/2 - 10.)
   vec2 r.vec = [ cos(theta), sin(theta) ]

   shape r.icon = Circle {
      center: r.pos
      r: 5
      fillColor: #000000ff
   } 
}

forall Group G {
   shape G.line = Line {
      start: (-canvas.width/2,-canvas.height/2 + 10)
      end: (canvas.width/2,-canvas.height/2 + 10)
      strokeWidth: 5
   }
   shape G.rectangle = Rectangle {
      center: (?, ?)
      width: random(40,100)
      height: random(40,100)
      strokeWidth: 1
   }
   shape G.circle = Circle {
      center: (?,?)
      r: random(40,80)
   }
   shape G.ellipse = Ellipse {
      center: (?,?)
      rx: random(60,100)
      ry: random(60,100)
   }

   vec2 p0 = (?,?)
   vec2 p1 = (?,?)
   vec2 p2 = (?,?)
   shape G.polygon = Polygon {
      points: [ p0, p1, p2 ]
   }
   vec2 e01 = p1-p0
   vec2 e12 = p2-p1
   vec2 e20 = p0-p2
   ensure angleBetween( e01, -e12 ) > toRadians(30)
   ensure angleBetween( e12, -e20 ) > toRadians(30)
   ensure angleBetween( e20, -e01 ) > toRadians(30)
   ensure abs(cross2D( e01, -e12 )) > 50

   shape G.icon = Group {
      shapes: [ G.line, G.rectangle, G.circle, G.ellipse, G.polygon ]
   }

   ensure disjoint( G.line, G.rectangle )
   ensure disjoint( G.line, G.circle )
   ensure disjoint( G.line, G.ellipse )
   ensure disjoint( G.line, G.polygon )
   ensure disjoint( G.rectangle, G.circle )
   ensure disjoint( G.rectangle, G.ellipse )
   ensure disjoint( G.rectangle, G.polygon )
   ensure disjoint( G.circle, G.ellipse )
   ensure disjoint( G.circle, G.polygon )
   ensure disjoint( G.ellipse, G.polygon )
}

forall Ray r; Shape S
{
   vec2 p = rayIntersect( S.icon, r.pos, r.vec )

   shape intersectDot = Circle {
      r: r.icon.r / 2
      center: p
      fillColor: #ffffffff
      strokeColor: #000000ff
      strokeWidth: 1.5
      ensureOnCanvas: false
   }

   shape line = Line {
      start: r.pos
      end: p
      strokeColor: rgba(1,.5,0,.1)
      strokeWidth: 3.5
      ensureOnCanvas: false
   }

   layer intersectDot below r.icon
   layer intersectDot above S.icon
   layer intersectDot above line
}


