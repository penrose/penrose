canvas {
   width = 200
   height = 200
}

camera {
  -- Camera viewpoint
  vec3 eye = (0,-10,150)
  vec3 center = (0,0,0)
  vec3 up = (0,-1,0) -- up is in positive Y direction
  mat4x4 model = lookAt( eye, center, up )

  -- Camera projection
  scalar fovy = 60 -- field of view in degrees
  scalar aspect = canvas.width / canvas.height -- aspect ratio
  mat4x4 proj = perspective( fovy, aspect )

  -- Viewport
  list view = [ -canvas.width/2, -canvas.height/2, canvas.width, canvas.height ]
}

global {

   -- Ground plane coordinates in 3D
   scalar planeSize = 50 -- plane size
   scalar planeHeight = -40 -- plane height

   -- Corner coordinates of the global ground plane
   vec3 q00 = ( -planeSize, planeHeight, -planeSize )
   vec3 q10 = (  planeSize, planeHeight, -planeSize )
   vec3 q01 = ( -planeSize, planeHeight,  planeSize )
   vec3 q11 = (  planeSize, planeHeight,  planeSize )

   -- Apply a random rotation to the ground plane
   scalar θ = random(0,2) * MathPI()
   mat3x3 R = rotate3d( θ, (0,1,0) ) -- rotation by θ around y-axis
   list q = [ R*q00, R*q10, R*q11, R*q01 ]

   -- Perform perspective projection on 3D coordinates to get 2D coordinates p
   vec2 p = projectList( q, camera.model, camera.proj, camera.view )

   -- Draw polygon using projected 2D coordinates
   shape groundPlane = Polygon {
      points: p
      width: canvas.width
      height: canvas.height
      fillColor: rgba(0,0,0,0.1)
      strokeColor: rgba(.7,.7,.7,1)
      strokeWidth: .5
      ensureOnCanvas: false
   }
}

forall Triangle t
{
   -- We'll sample the triangle vertices from a bounding box of size c
   scalar c = .9*min( global.planeSize, abs(global.planeHeight) )

   -- triangle vertex coordinates in 3D
   vec3 qi = (?,?,?)
   vec3 qj = (?,?,?)
   vec3 qk = (?,?,?)

   ensure -c < qi[0]
   ensure qi[0] < c
   ensure -c < qi[1]
   ensure qi[1] < c
   ensure -c < qi[2]
   ensure qi[2] < c

   ensure -c < qj[0]
   ensure qj[0] < c
   ensure -c < qj[1]
   ensure qj[1] < c
   ensure -c < qj[2]
   ensure qj[2] < c

   ensure -c < qk[0]
   ensure qk[0] < c
   ensure -c < qk[1]
   ensure qk[1] < c
   ensure -c < qk[2]
   ensure qk[2] < c

   -- Perform perspective projection on 3D coordinates to get 2D coordinates p
   list q = [ qi, qj, qk ]
   list p = projectList( q, camera.model, camera.proj, camera.view )

   -- named references to individual points (for later use)
   t.pi = ( p[0][0], p[0][1] )
   t.pj = ( p[1][0], p[1][1] )
   t.pk = ( p[2][0], p[2][1] )

   -- Draw polygon using projected 2D coordinates p
   shape t.icon = Polygon {
      points: p
      width: canvas.width
      height: canvas.height
      fillColor: #34379aaa
      strokeColor: #1b1f8a
      strokeWidth: .5
      ensureOnCanvas: false
   }

   -- Make sure the triangle is positively oriented in the
   -- image plane, and has some "fat" angles so that it
   -- doesn't degenerate
   vec2 eij = t.pj - t.pi
   vec2 ejk = t.pk - t.pj
   vec2 eki = t.pi - t.pk
   ensure cross2D( eij, -ejk ) < 0
   ensure angleFrom( -ejk, eij ) > toRadians( 45 )
   ensure angleFrom( -eki, ejk ) > toRadians( 45 )
   ensure angleFrom( -eij, eki ) > toRadians( 45 )

   -- Draw triangle vertices and labels as dots and equations,
   -- using again the projected 2D coordinates p
   scalar dotSize = 1.0
   color dotColor = rgba(0,0,0,1)
   string dotFontSize = "10px"
   scalar offset = 6 -- offset of labels from vertices
   shape t.vertexI = Circle {
      center: t.pi
      r: dotSize
      fillColor: dotColor
   }
   shape t.vertexJ = Circle {
      center: t.pj
      r: dotSize
      fillColor: dotColor
   }
   shape t.vertexK = Circle {
      center: t.pk
      r: dotSize
      fillColor: dotColor
   }
   shape t.labelI = Equation {
       string: t.label + "_i"
       center: t.pi - offset*unit(eij-eki)
       fontSize: dotFontSize
   }
   shape t.labelJ = Equation {
       string: t.label + "_j"
       center: t.pj - offset*unit(ejk-eij)
       fontSize: dotFontSize
   }
   shape t.labelK = Equation {
       string: t.label + "_k"
       center: t.pk - offset*unit(eki-ejk)
       fontSize: dotFontSize
   }

   -- Finally, draw a shadow of the triangle on the global ground plane
   -- by just replacing the y-coordinate with the height of the ground plane
   scalar h = global.planeHeight
   list r = [ (qi[0],h,qi[1]), (qj[0],h,qj[1]), (qk[0],h,qk[1]) ]

   -- Perform perspective projection on 3D coordinates r to get 2D coordinates s
   list s = projectList( r, camera.model, camera.proj, camera.view )

   -- Draw shadow polygon using projected 2D coordinates s
   shape t.shadow = Polygon {
      points: s
      width: canvas.width
      height: canvas.height
      fillColor: rgba(0,0,0,0.1)
      strokeColor: none()
      ensureOnCanvas: false
   }
}

-- For any pair of triangles, make sure that triangles
-- don't overlap, and moreover the vertices of one triangle are
-- far from being contained in the other triangle (which helps
-- to avoid overlapping labels).
forall Triangle s; Triangle t
{
   scalar padding = 10.0

   -- make sure triangles don't overlap
   ensure disjoint( t.icon, s.icon )

   -- make sure vertices of t are far from s
   ensure disjoint( t.vertexI, s.icon, padding )
   ensure disjoint( t.vertexJ, s.icon, padding )
   ensure disjoint( t.vertexK, s.icon, padding )

   -- make sure vertices of s are far from t
   ensure disjoint( s.vertexI, t.icon, padding )
   ensure disjoint( s.vertexJ, t.icon, padding )
   ensure disjoint( s.vertexK, t.icon, padding )
}

