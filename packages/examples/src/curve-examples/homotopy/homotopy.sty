
forall Shape s {
    vec2 p1 = (?,?)
    vec2 p2 = (?,?)
    vec2 p3 = (?,?)
    vec2 p4 = (?,?)

    vec2 p5 = (?,?)
    vec2 p6 = (?,?)
    vec2 p7 = (?,?)
    vec2 p8 = (?,?)

    scalar r1 = 0.2
    scalar g1 = 0.8
    scalar b1 = 0.2

    scalar r2 = 0.4
    scalar g2 = 0.2
    scalar b2 = 0.9

    shape curve1 = Path {
        d: cubicCurveFromPoints("open", [p1, p2, p3, p4])
        strokeColor: rgba(1.0 * r1 + 0.0 * r2, 1.0 * g1 + 0.0 * g2, 1.0 * b1 + 0.0 * b2, 1.0)
        strokeWidth: 4.5
        ensureOnCanvas: true
    }
    shape curve2 = Path {
        d: cubicCurveFromPoints("open", [0.8 * p1 + 0.2 * p5, 0.8 * p2 + 0.2 * p6, 0.8 * p3 + 0.2 * p7, 0.8 * p4 + 0.2 * p8])
        strokeColor: rgba(0.8 * r1 + 0.2 * r2, 0.8 * g1 + 0.2 * g2, 0.8 * b1 + 0.2 * b2, 1.0)
        strokeWidth: 1.5
        ensureOnCanvas: true
    }
    shape curve3 = Path {
        d: cubicCurveFromPoints("open", [0.6 * p1 + 0.4 * p5, 0.6 * p2 + 0.4 * p6, 0.6 * p3 + 0.4 * p7, 0.6 * p4 + 0.4 * p8])
        strokeColor: rgba(0.6 * r1 + 0.4 * r2, 0.6 * g1 + 0.4 * g2, 0.6 * b1 + 0.4 * b2, 1.0)
        strokeWidth: 2.5
        ensureOnCanvas: true
    }
    shape curve4 = Path {
        d: cubicCurveFromPoints("open", [0.4 * p1 + 0.6 * p5, 0.4 * p2 + 0.6 * p6, 0.4 * p3 + 0.6 * p7, 0.4 * p4 + 0.6 * p8])
        strokeColor: rgba(0.4 * r1 + 0.6 * r2, 0.4 * g1 + 0.6 * g2, 0.4 * b1 + 0.6 * b2, 1.0)
        strokeWidth: 2.5
        ensureOnCanvas: true
    }
    shape curve5 = Path {
        d: cubicCurveFromPoints("open", [0.2 * p1 + 0.8 * p5, 0.2 * p2 + 0.8 * p6, 0.2 * p3 + 0.8 * p7, 0.2 * p4 + 0.8 * p8])
        strokeColor: rgba(0.2 * r1 + 0.8 * r2, 0.2 * g1 + 0.8 * g2, 0.2 * b1 + 0.8 * b2, 1.0)
        strokeWidth: 2.5
        ensureOnCanvas: true
    }
    shape curve6 = Path {
        d: cubicCurveFromPoints("open", [p5, p6, p7, p8])
        strokeColor: rgba(0.0 * r1 + 1.0 * r2, 0.0 * g1 + 1.0 * g2, 0.0 * b1 + 1.0 * b2, 1.0)
        strokeWidth: 4.5
        ensureOnCanvas: true
    }

    scalar length = vdist(p1, p2) + vdist(p2, p3) + vdist(p3, p4)
    encourage equal(length, 1800)
    scalar q1 = p1[0] * p2[1] - p1[1] * p2[0]
    scalar q2 = p2[0] * p3[1] - p2[1] * p3[0]
    scalar q3 = p3[0] * p4[1] - p3[1] * p4[0]
    scalar area = 0.5 * (q1 + q2 + q3)
    
    encourage equal(area, 2 * 200 * 100)

    vec2 v1 = (p2[0] - p1[0], p2[1] - p1[1])
    vec2 v2 = (p3[0] - p2[0], p3[1] - p2[1])
    vec2 v3 = (p4[0] - p3[0], p4[1] - p3[1])

    scalar vq1 = v1[0] * v2[1] - v1[1] * v2[0]
    scalar vq2 = v2[0] * v3[1] - v2[1] * v3[0]

    scalar angle1 = sign(vq1) * acos(dot(v1, v2) / norm(v1) / norm(v2))
    scalar angle2 = sign(vq2) * acos(dot(v2, v3) / norm(v2) / norm(v3))

    encourage equal(angle1, angle2)
    encourage equal(norm(v1), norm(v2))
    encourage equal(norm(v2), norm(v3))
}
