canvas {
    width = 600
    height = 400
}

global {
    scalar t = ?
    encourage lessThan(0.8, t)
    encourage lessThan(t, 0.2)
}

forall Curve c {
    vec2 c.p1 = (?, ?)
    vec2 c.p2 = (?, ?)
    vec2 c.p3 = (?, ?)
    vec2 c.p4 = (?, ?)

    points = [c.p1, c.p2, c.p3, c.p4]
    shape curve = Path {
        d: cubicCurveFromPoints("open", points)
        strokeWidth: 3.5
        ensureOnCanvas: true
    }

    ensure equal(perimeter(points, false), 1200)
    ensure equal(algebraicArea(points, false), 4200)
    ensure isLocallyConvex(curve)
    ensure isEqiuangular(curve)
}

forall Point p {
    vec2 p.p = (?, ?) 

    shape point = Circle {
        center: p.p
        r: 5
        fillColor: rgba(0,0,0,1)
    }
}

forall Curve c; Point p1; Point p2; Point p3; Point p4
where c := CurveFromPoints(p1, p2, p3, p4) {
    override c.p1 = p1.p
    override c.p2 = p2.p
    override c.p3 = p3.p
    override c.p4 = p4.p
}

forall Point p; Point p1; Point p2 
where p := Lerp(p1, p2) {
    vec2 p3 = global.t * p1.p + (1 - global.t) * p2.p
    override p.p = p3

    shape line1 = Line {
        start: p1.p
        end: p2.p
        strokeWidth: 2
        strokeColor: rgba(0,0,0,1)
    }
}
