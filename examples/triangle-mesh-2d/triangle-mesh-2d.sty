canvas {
   width = 360
   height = 270
}

Colors {
   color black = rgba(0.,0.,0.,1.)
   color white = rgba(1.,1.,1.,1.)
   color lightGray = rgba(.8,.8,.8,1.)
   color clear = rgba(0.,0.,0.,0.)
   color semiBlue = rgba( 27./255., 31./255., 138./255., .2 )
}

Global {
   scalar vertexRadius = 1.75
   scalar pointRadius = 2.0
   scalar lineThickness = 1.

   shape box = Rectangle {
      center: (0.,0.)
      color: Colors.clear
      strokeColor: Colors.lightGray
      strokeWidth: 2.
      w: canvas.width
      h: canvas.height
   }

   string fontFamily = "Palatino"
   string fontSize = "9pt"
}

forall Vertex v {

   vec2 v.center = (?,?)

   -- black dot
   shape v.icon = Circle {
      color: Colors.black
      r: Global.vertexRadius
      center: v.center
   }

   -- label
   shape v.text = Text {
      center: (?,?)
      string: v.label
      fontFamily: Global.fontFamily
      fontSize: Global.fontSize
      fontStyle: "italic"
      color: Colors.black
   }

   -- invisible circle around label
   -- (used to prevent overlap)
   -- TODO we should really stop hacking
   -- TODO this, and just get bounding
   -- TODO boxes working for Text...
   shape v.bounds = Circle {
      center: v.text.center
      r: 7
      color: none()
   }

   -- make sure the dot and label are both
   -- on the canvas
   ensure contains( Global.box, v.icon )
   ensure contains( Global.box, v.bounds )

   -- keep the label near the dot
   encourage equal( norm(v.text.center - v.icon.center), 0. )
}

-- make sure vertex labels don't overlap
forall Vertex u; Vertex v {
   ensure disjoint( u.bounds, v.bounds )
}

forall Edge e; Vertex i; Vertex j
where e := MakeEdge(i,j) {
   
   -- black line between endpoints
   shape e.icon = Line {
      start: i.icon.center
      end: j.icon.center
      color: Colors.black
      thickness: Global.lineThickness
   }

   -- make sure edge doesn't cover the
   -- labels of its two endpoints
   ensure disjoint( i.bounds, e.icon, 1. )
   ensure disjoint( j.bounds, e.icon, 1. )
}

-- make sure no edge ij covers the label of
-- any other vertex k
forall Edge e; Vertex i; Vertex j; Vertex k
where e := MakeEdge(i,j) {
   
   ensure disjoint( k.bounds, e.icon, 1. )
}

forall Triangle t; Vertex i; Vertex j; Vertex k
where t := MakeTriangle(i,j,k)
{
   vec2 a = i.icon.center
   vec2 b = j.icon.center
   vec2 c = k.icon.center

   vec2 t.circumcenter = circumcenter(a,b,c)

   shape t.icon = Path {
      pathData: pathFromPoints("closed", [a,b,c])
      fill: Colors.semiBlue
      color: none()
   }

   -- XXX This sadly causes a lot of NaNs...
   -- Make sure triangles are positively
   -- oriented and not tiny, by making their
   -- signed area greater than some fixed constant.
   scalar A = cross2D( b-a, c-a )
   encourage lessThan( 2000., A )

   scalar aTheta = angleFrom( b-a, c-a )
   scalar bTheta = angleFrom( c-b, a-b )
   scalar cTheta = angleFrom( a-c, b-c )
   ensure inRange( aTheta, toRadians(10.), toRadians(50.) )
   ensure inRange( bTheta, toRadians(10.), toRadians(50.) )
   ensure inRange( cTheta, toRadians(10.), toRadians(50.) )
}

forall Corner c; Vertex i; Vertex j; Vertex k
where c := MakeCorner(i,j,k) {

   vec2 p = i.center
   vec2 q = j.center
   vec2 r = k.center
   
   scalar s = .35 -- arc radius as fraction of edge length
   scalar R = s*norm(q-p)
   vec2 u = (q-p)/norm(q-p)
   vec2 v = (r-p)/norm(r-p)
   vec2 x = p + R*u
   vec2 y = p + R*v

   shape c.arc = Path {
      fill: none()
      color: Colors.black
      pathData: arc( "open", x, y, (R,R), 0., 0, 0 )
      strokeWidth: .75
   }

   shape c.arcFill = Path {
      fill: none()
      color: none()
      pathData: wedge( i.center, x, y, (R,R), 0., 0, 0 )
      fill: Colors.semiBlue
   }

   scalar R0 = i.bounds.r

   shape c.text = Text {
      string: c.label
      center: p + (R+R0)*unit(u+v)
      fontSize: Global.fontSize
      fontFamily: Global.fontFamily
      fontStyle: "italic"
      color: Colors.black
   }
}

forall Point p {

   vec2 p.center = (?,?)

   -- white dot
   shape p.icon = Circle {
      color: Colors.white
      strokeColor: Colors.black
      r: Global.pointRadius
      center: p.center
      strokeWidth: 1.
   }

   -- label
   shape p.text = Text {
      center: (?,?)
      string: ""
      fontFamily: Global.fontFamily
      fontSize: Global.fontSize
      fontStyle: "italic"
      color: Colors.black
   }

   -- make sure the dot and label are both
   -- on the canvas
   ensure contains( Global.box, p.icon )

   -- keep the label near the dot
   encourage equal( norm(p.text.center - p.icon.center), 0. )
}

forall Point p; Triangle t {
   layer p.icon above t.icon
}

-- Barycenter
forall Point p; Triangle t; Vertex i; Vertex j; Vertex k
where p := Barycenter(t); t := MakeTriangle(i,j,k) {
   override p.center = barycenter( i.center, j.center, k.center )
}

-- Circumcenter
forall Point p; Triangle t; Vertex i; Vertex j; Vertex k
where p := Circumcenter(t); t := MakeTriangle(i,j,k) {

   -- put point at circumcenter 
   vec2 x = circumcenter( i.center, j.center, k.center )
   override p.center = x

   -- draw circumcircle
   scalar R = norm( x - i.center )
   shape circumcircle = Circle {
      center: x
      r: R
      color: none()
      strokeColor: Colors.black
      strokeWidth: .5
      strokeStyle: "dashed"
   }
}

-- -- Incenter
-- forall Point p; Triangle t; Vertex i; Vertex j; Vertex k
-- where p := Incenter(t); t := MakeTriangle(i,j,k) {
-- 
--    -- put point at incenter 
--    vec2 p.inCenter = incenter( i.center, j.center, k.center )
--    override p.center = p.inCenter
-- 
--    -- draw incircle
--    scalar p.inRadius = inradius( i.center, j.center, k.center )
--    shape p.decoration = Circle {
--       center: p.inCenter
--       r: p.inRadius
--       color: none()
--       strokeColor: Colors.black
--       strokeWidth: .5
--       strokeStyle: "dashed"
--    }
-- }

forall DualEdge d; Triangle t1; Triangle t2
where d := MakeDualEdge(t1,t2) {

   shape d.icon = Line {
      start: t1.circumcenter
      end: t2.circumcenter
      color: Colors.black
      thickness: Global.lineThickness
      style: "dashed"
   }
}

