-- By default, use a canvas size suitable for a full-
-- column figure in a two-column ACM article.
canvas {
   width = 243
   height = 182
}

Colors {
   color black = rgba(0.,0.,0.,1.)
   color lightGray = rgba(.8,.8,.8,1.)
   color clear = rgba(0.,0.,0.,0.)
}

Global {
   scalar vertexRadius = 2.

   shape box = Rectangle {
      center: (0.,0.)
      color: Colors.clear
      strokeColor: Colors.lightGray
      strokeWidth: 2.
      w: canvas.width
      h: canvas.height
   }

   string fontFamily = "Palatino"
}

forall Vertex v {

   vec2 v.center = (?,?)

   -- black dot
   shape v.icon = Circle {
      color: Colors.black
      r: Global.vertexRadius
      center: v.center
   }

   -- label
   shape v.text = Text {
      center: (?,?)
      string: v.label
      fontFamily: Global.fontFamily
      fontSize: "9pt"
      fontStyle: "italic"
      color: Colors.black
   }

   -- invisible circle around label
   -- (used to prevent overlap)
   -- TODO we should really stop hacking
   -- TODO this, and just get bounding
   -- TODO boxes working for Text...
   shape v.bounds = Circle {
      center: v.text.center
      r: 8
      color: none()
   }

   -- make sure the dot and label are both
   -- on the canvas
   ensure contains( Global.box, v.icon )
   ensure contains( Global.box, v.bounds )

   -- keep the label near the dot
   encourage near( v.text, v.icon )
}

-- make sure vertex labels don't overlap
forall Vertex u; Vertex v {
   ensure disjoint( u.bounds, v.bounds )
}

forall Edge e; Vertex i; Vertex j
where e := MakeEdge(i,j) {
   
   -- black line between endpoints
   shape e.icon = Line {
      start: i.icon.center
      end: j.icon.center
      color: Colors.black
      thickness: 1.25
   }

   -- make sure edge doesn't cover the
   -- labels of its two endpoints
   ensure disjoint( i.bounds, e.icon, 1. )
   ensure disjoint( j.bounds, e.icon, 1. )
}

-- make sure no edge ij covers the label of
-- any other vertex k
forall Edge e; Vertex i; Vertex j; Vertex k
where e := MakeEdge(i,j) {
   
   ensure disjoint( k.bounds, e.icon, 1. )
}

forall Triangle t; Vertex i; Vertex j; Vertex k
where t := MakeTriangle(i,j,k)
{
   vec2 a = i.icon.center
   vec2 b = j.icon.center
   vec2 c = k.icon.center

   shape t.icon = Polygon {
      points: (a,b,c)
   }
}

