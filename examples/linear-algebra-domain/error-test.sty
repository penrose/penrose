canvas {
  width = 800
  height = 700
}

const { -- 0
  scalar perpLen = 20.0
  -- For unit mark
  scalar markerPadding = 15.0
  scalar barSize = 5.0
  scalar vectorSpaceSize = 350.0
  scalar repelWeight = 0.7
  scalar arrowheadSize = 0.7
  scalar lineThickness = 1.
  int intForTesting = 1
  bool boolForTesting = true
}

C { -- 1
    -- black = #000000
    color black = rgba(0.,0.,0.,1.)
    white = rgba(1., 1., 1., 1.)
    lightBlue = rgba(1e-1, 0.1, 0.9, 1.0)
    darkBlue = rgba(lightBlue.r / 2., lightBlue.g / 2., lightBlue.b / 2., 0.5)
    darkGray = rgba(0.4, 0.4, 0.4, 1.)
    gray = rgba(0.6, 0.6, 0.6, 1.)
    green = rgba(0., 0.8, 0., 1.)
    -- blue = #0000ff
    none = none()
}

testing { -- 2

} 

-------- broken selectors -- should throw errors

forall Thing U {
}

-- TODO(error): fails but the error message is hard to interpret due to disambiguation, and throws fatal error rather than adding to list

-- forall VectorSpace U; Vector u
-- where u := Nonexistent(U) {
-- }

forall VectorSpace U; Vector U {
}

forall VectorSpace `x1` {
}

forall Vector v; VectorSpace U
where Orthogonal(v, U) {
}

forall Vector v; Vector w
where Orthogonal(v, e) {
}

forall Scalar c
with Vector v; Vector w; Vector u
where u := scale(v, w) {
}

forall Scalar c
with Scalar d; Vector w
where c := scale(w, d) {
}

--------- working selectors w/ tests for translation

forall VectorSpace U { -- 3

       U.f = ?

       shape U.xAxis = Circle {
             center: (0., 0.)
       }

      -- TODO(error): if there are multiple matches, override errors behave oddly
      U.xAxis.fillColor = C.black
      -- U.xAxis.fillColor = C.green -- test override -- throws error if uncommented

      delete U.xAxis.fillColor

      delete U.xAxis.stroke -- TODO(err): this should throw an error, but doesn't
}

forall Vector u; VectorSpace U -- 4
where In(u,U) {

      override U.f = 1. -- test field overrides

      -- TODO(error): if there are multiple matches, (non) override errors behave oddly
      -- U.xAxis.fillColor = C.black

       shape u.arrow = Line {
       }

}

forall Vector u; Vector v -- 5
with VectorSpace U
where Orthogonal(u, v); In(u, U); In(v, U) {

}

forall Vector v -- 6
with VectorSpace U; Vector w
where In(v, U); Unit(v); Orthogonal(v, w) {

}

forall Vector `x2` { -- 7

}