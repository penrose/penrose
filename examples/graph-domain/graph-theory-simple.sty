-- WIP - this file doesn't work fully

canvas {
  width = 800
  height = 700
}

Colors {
    Colors.black = rgba(0.0, 0.0, 0.0, 1.0)
    Colors.darkgray = rgba(0.1, 0.1, 0.1, 1.0)
    Colors.gray = rgba(0.8, 0.8, 0.8, 1.0)
    Colors.red = rgba(1.0, 0.0, 0.0, 1.0)
    Colors.pink = rgba(1.0, 0.4, 0.7, 1.0)
    Colors.yellow = rgba(1.0, 1.0, 0.0, 1.0)
    Colors.orange = rgba(1.0, 0.6, 0.0, 1.0)
    Colors.lightorange = rgba(1.0, 0.6, 0.0, 0.25)
    Colors.green = rgba(0.0, 1.0, 0.0, 1.0)
    Colors.blue = rgba(0.0, 0.0, 1.0, 1.0)
    Colors.sky = rgba(0.325, 0.718, 0.769, 1.0)
    Colors.lightsky = rgba(0.325, 0.718, 0.769, 0.25)
    Colors.lightblue = rgba(0.0, 0.0, 1.0, 0.25)
    Colors.cyan = rgba(0.0, 1.0, 1.0, 1.0)
    Colors.purple = rgba(0.5, 0.0, 0.5, 1.0)
    Colors.white = rgba(1.0, 1.0, 1.0, 1.0)
    Colors.none = rgba(0.0, 0.0, 0.0, 0.0)
    Colors.bluegreen = rgba(0.44, 0.68, 0.60, 1.0)
}

global {
    global.padding = 20.0
    global.stroke = 2.0
    global.box = Rectangle {
               center: (0., 0.)
               w: 700.
               h: 500.
               color: Colors.none
               strokeColor: Colors.black
    }
}

Vertex V {
       V.shape = Rectangle { 
         w: V.text.w + global.padding
         h: V.text.h + global.padding
         -- r : 10.0
	 color : Colors.none
	 strokeWidth : 2.
         strokeColor: Colors.black
       }

       V.text = Text {
	 center: V.shape.center
	 string : V.label
	 color : Colors.black
       }

       ensure contains(global.box, V.shape)

       V.text above V.shape
       V.shape above global.box
}

Edge E
where E := MkEdge(v1, v2)
with Vertex v1; Vertex v2 {

     vec2 dir = normalize(v2.shape.center - v1.shape.center)
     scalar padding = 20.
     -- scalar arrowheadSize = 17. -- Guess

     -- TODO: This doesn't appear to work correctly even with all the constraints/objectives off. and no arrowhead. Why? What code is generated?
     -- Oh, this is not the full calculation. x1 = (l/2) / cos theta
     -- If it's just for the shapes evaluation round, it's evaluated in the translation, not compiled.
   -- scalar startSideDim = intersectingSideSize(v1.shape.center, v2.shape.center, v1.shape)
   -- scalar endSideDim = intersectingSideSize(v2.shape.center, v1.shape.center, v2.shape)

   scalar startSideDim = v1.shape.w
   scalar endSideDim = v2.shape.w

     E.shape = Line { 
     	     start : v1.shape.center + (startSideDim / 2. + padding) * dir
     	     end : v2.shape.center - (endSideDim / 2. + padding) * dir
	     color : Colors.black
	     thickness : 2.0
             -- rightArrowhead: true
             -- arrowheadSize: 0.7
     }

     E.text = Text {
       string : E.label
       rotation : 0.0
     }

-- DEBUG: Maybe it has to do with optimizing WRT the shape of the arrow??

     -- encourage centerLabel(E.shape, E.text, 5.0)
     -- ensure disjoint(E.text, E.shape)
     -- ensure contains(global.box, E.text)

-- DEBUG: Or, adding this `equal` makes it slower? Maybe because it involves v1.shape.center?
-- Or, adding multiple functions that involve the arrow and box makes things slow, because there's a blowup?

-- DEBUG: What exactly is slow? Is it the optimization itself, or the grad gen or something else?

   -- encourage equal(v1.shape.center[1], v2.shape.center[1]) 
   -- ensure lessThan(v1.shape.center[0], v2.shape.center[0]) 
   -- ensure minSize(E.shape)

     v1.shape above E.shape
     v2.shape above E.shape
     E.text above global.box
     E.shape above global.box
}

Vertex v1; Vertex v2 {
-- DEBUG: These two together appear to cause a horrible slowdown, but not individually??
-- Maybe because there are constraints and objectives??
       -- ensure disjoint(v1.shape, v2.shape, 10.)
       -- encourage repel(v1.shape, v2.shape)
}

Edge e1; Edge e2 {
   -- ensure disjoint(e1.text, e2.text)
   -- ensure notCrossing(e1.shape, e2.shape)
}

Vertex v; Edge e {
-- DEBUG: These two also appear to cause a big slowdown?
       -- ensure disjoint(v.shape, e.shape)
       -- ensure disjoint(v.shape, e.text)
}
