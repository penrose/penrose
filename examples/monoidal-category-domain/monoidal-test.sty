Colors {
    black = rgba(0.0, 0.0, 0.0, 1.0)
    darkgray = rgba(0.1, 0.1, 0.1, 1.0)
    gray = rgba(0.8, 0.8, 0.8, 1.0)
    red = rgba(1.0, 0.0, 0.0, 1.0)
    pink = rgba(1.0, 0.4, 0.7, 1.0)
    yellow = rgba(1.0, 1.0, 0.0, 1.0)
    orange = rgba(1.0, 0.6, 0.0, 1.0)
    lightorange = rgba(1.0, 0.6, 0.0, 0.25)
    green = rgba(0.0, 1.0, 0.0, 1.0)
    blue = rgba(0.0, 0.0, 1.0, 1.0)
    sky = rgba(0.325, 0.718, 0.769, 1.0)
    lightsky = rgba(0.325, 0.718, 0.769, 0.25)
    lightblue = rgba(0.0, 0.0, 1.0, 0.25)
    cyan = rgba(0.0, 1.0, 1.0, 1.0)
    purple = rgba(0.5, 0.0, 0.5, 1.0)
    white = rgba(1.0, 1.0, 1.0, 1.0)
    none = none()
    bluegreen = rgba(0.44, 0.68, 0.60, 1.0)
}

canvas {
    width = 1000.
    height = 600.

    shape box = Rectangle {
        w: width
        h: height
        center: (0., 0.)
        strokeColor: rgba(0., 0., 0., 1.)
        strokeWidth: 3.
        color: rgba(1., 1., 1., 0.)
    }

    -- TODO(bug): file issue as the local var `box` doesn't seem to work here
         left = canvas.box.center[0] - canvas.box.w/2.
         right = canvas.box.center[0] + canvas.box.w/2.
         top = canvas.box.center[1] + canvas.box.h/2.
         bot = canvas.box.center[1] - canvas.box.h/2.
}

Object o {
       scalar o.minY = canvas.bot
       scalar o.maxY = canvas.top

       scalar o.minX = canvas.left
       scalar o.maxX = canvas.right

    scalar o.y = ?
    vec2 o.v1 = (o.minX, o.y)
    vec2 o.v2 = (o.maxX, o.y)

    shape o.shape = Line {
        start: o.v1
        end: o.v2
        -- color: rgba(0., 0., 0., 1.)
        thickness: 5.
        rightArrowhead: true
        arrowheadSize: 0.5
    }

    shape o.text = Text {
           center: (o.shape.start + o.shape.end) / 2.
           string: o.label
           fontSize: "20pt"
    }

    ensure inRange(o.y, o.minY, o.maxY)

    ensure lessThan(o.shape.start[0], o.shape.end[0], 50.)

    -- ensure minSize(o.shape)
    o.shape above canvas.box
}

Morphism m {
         -- The floating vars are the rect centers
         shape m.shape = Rectangle { 
                  center: (?, ?)
                  w: 100. 
                  h: 300.
               color: rgba(1.,1.,1.,0.)
               strokeColor: rgba(0., 0., 0., 1.)
               strokeWidth: 3.
         }

         shape m.text = Text {
               center: m.shape.center
               string: m.label
                  fontSize: "20pt"
         }

         m.left = m.shape.center[0] - m.shape.w/2.
         m.right = m.shape.center[0] + m.shape.w/2.
         m.top = m.shape.center[1] + m.shape.h/2.
         m.bot = m.shape.center[1] - m.shape.h/2.

         ensure contains(canvas.box, m.shape)

         m.shape above canvas.box
         m.text above m.shape
}

Object p
with Object a, b
where p := tensor(a, b) {
      override p.shape.color = rgba(1.0, 0.0, 0.0, 0.1)
      override p.shape.style = "dashed"

      -- bottom-up
      override p.y = (a.y + b.y)/2.

      -- top-down
      override a.minY = p.minY
      override a.maxY = p.maxY

      override b.minY = p.minY
      override b.maxY = p.maxY

      override a.minX = p.minX
      override a.maxX = p.maxX

      override b.minX = p.minX
      override b.maxX = p.maxX

      -- Repel the `y`s of the input objects from each other? TODO: Will this work for "base" objects and not "phantom' ones? And not be applied too many times? Problem is that "child" objects don't all know each other
      -- encourage repelScalar(a.y, b.y)
}

Morphism m
with Object a, b
where m := join(a, b) {
      -- override m.shape.color = Colors.green

      -- TODO: overriding nonexistent fields should throw an error. like `override a.sdjfsadfjhks = 0`
      override a.maxX = m.left
      override b.minX = m.right

      -- top-down?
      override a.minY = m.bot
      override a.maxY = m.top

      override b.minY = m.bot
      override b.maxY = m.top

      -- Instead of doing this, every object has its own local range that it imposes, and the info moves from top-down
      -- ensure inRange(a.y, m.bot, m.top)
      -- ensure inRange(b.y, m.bot, m.top)

      -- TODO: Repel the `y` from both top and bot of shape, on each side

      -- The "invisible object" is placed near the center 
      encourage nearScalar(a.y, m.shape.center[1])
      encourage nearScalar(b.y, m.shape.center[1])

      a.shape above m.shape
      b.shape above m.shape
}

Object o; Morphism m
where NotChildOf(o, m) {
       ensure disjointRectLineAA(m.shape, o.shape)
}

Morphism m1; Morphism m2 {
         ensure disjoint(m1.shape, m2.shape)
}

-- TODO: each object's `y` should be attracted to the center of the morphism, and repel all other objects
-- TODO: each object's `y` should be out of the range of all morphisms' `y`s
-- TODO: an object between the morphisms should have a `y` that's in the range of both morphisms

-- TODO: Maybe these are conflicting with `nearScalar`?
-- Object o; Object p; Morphism m
-- where ChildOf(o, m); ChildOf(p, m) {
--       encourage repelScalar(o.y, p.y)

-- }

-- Object o; Morphism m
-- where ChildOf(o, m) {
--       encourage repelScalar(o.y, m.top)
--       encourage repelScalar(o.y, m.bot)
-- }

-- Problem is that "child" objects don't all know each other
-- So, it's hard (impossible?) to select the every object/morphism pair where the object is not a child of the morphism

-- TODO: how would you state this predicate? "NotChildOf" is not unique to this case
-- Object o; Morphism m
-- where NotChildOf(o, m) {
       -- Would want `o.y` disjoint from `[m.bot, m.top]`
       -- ensure disjointScalar(o.y, m.bot, m.top)
-- }