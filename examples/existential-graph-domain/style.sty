variable {
    primary = sampleColor(1.0, "rgb")
    secondary = sampleColor(1.0, "rgb")
}

forall Graph A
{
    A.icon = Circle {
        strokeWidth: 0.0
        fillColor: rgba(0.0, 0.0, 0.0, 0.0)
    }

    A.text = Equation{
        string: A.label
    }

    A.level = 0

    ensure minSize(A.icon)
    ensure contains(A.icon, A.text)
    ensure contains(A.icon, A.text)

    A.text above A.icon
}

forall Variable V
{
    V.icon = Path {
        fillColor: rgba(0.0, 0.0, 0.0, 0.0)
        strokeColor: rgba(0.0, 0.0, 0.0, 0.0)
        strokeWidth: 2.0
    }
}



forall Variable v1; Variable v2 where equal(v1,v2) {
    --Overriding (v2.icon.d or v2.icon) has no effect, creating new object
    v2.icon2 = Path {
        d: makePath(v1.start, v2.start, 50, 10)
        fillColor: rgba(0.0, 0.0, 0.0, 0.0)
        strokeColor: rgba(0.0, 0.0, 0.0, 1.0)
        strokeWidth: 2.0
    }

    override v1.icon.strokeWidth = 0.0
    override v2.icon.strokeWidth = 0.0
}



forall Variable V; Graph A; Graph B where some(V, A, B)
{
    override V.icon.d = makePath(A.text.center, B.text.center, 50, 10)
    override V.icon.strokeColor = rgba(0.0, 0.0, 0.0, 1.0)

    V.start = A.text.center
    V.end = B.text.center

    V.icon above A.text
    V.icon above B.text
}

forall Graph A; Graph B; Graph Result 
where Result := or(A, B) 
{
    override A.icon.fillColor = variable.primary
    override B.icon.fillColor = variable.primary

    override Result.level = A.level + 1

    Result.icon2 = Circle {
        strokeWidth: 0.0
        center: Result.icon.center
        r: Result.icon.r - 1.0
        fillColor: selectColor(variable.primary, variable.secondary, Result.level)
    }

    override Result.text = Circle{
        strokeWidth: 0.0
        r : 0.0
    }

    ensure smallerThan(A.icon, Result.icon)
    ensure smallerThan(B.icon, Result.icon)
    ensure contains(Result.icon2, A.icon, 5.0)
    ensure contains(Result.icon2, B.icon, 5.0)
    ensure disjoint(A.icon, B.icon)

    A.icon above Result.icon2
    B.icon above Result.icon2
    A.text above Result.icon2
    B.text above Result.icon2
}


forall Graph a where invisibleGraph(a){
    override a.text.fillColor = rgba(1.0, 0.0, 0.0, 0.0)
}



forall Graph A; Graph B; Graph Result 
where Result := if(A, B) 
{
    override Result.level = A.level + 1

    override Result.icon = Circle{
        strokeWidth: 0.0
        fillColor: selectColor(variable.primary, variable.secondary, Result.level)
    }

    override Result.icon2 = Circle{
        strokeWidth: 0.0
        fillColor: selectColor(variable.primary, variable.secondary, Result.level + 1)
    }

    override Result.text.string = ""

    override Result.icon2.r = Result.icon.r / 1.6

    ensure disjoint(A.text, Result.icon2)
    ensure contains(Result.icon, A.text)
    ensure contains(Result.icon2, B.text)

    ensure lessThan(20, Result.icon.r)
    ensure lessThan(20, Result.icon2.r)
    ensure contains(Result.icon, Result.icon2, 5.0)

    ensure contains(Result.icon2, B.icon, 5.0)


    Result.icon2 above Result.icon
    Result.icon2 below A.icon
    Result.icon2 below B.icon

}